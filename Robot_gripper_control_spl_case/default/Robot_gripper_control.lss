
Robot_gripper_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  0000225e  000022d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000225e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000023da  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001b6  00000000  00000000  000023fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000074c  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000161  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a55  00000000  00000000  00002e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d0  00000000  00000000  000038b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002ab  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e5       	ldi	r30, 0x5E	; 94
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	0e 94 2e 04 	call	0x85c	; 0x85c <main>
     112:	0c 94 2d 11 	jmp	0x225a	; 0x225a <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <servo1_pin_config>:
#include <avr/interrupt.h>
#include <util/delay.h>

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     122:	a4 e2       	ldi	r26, 0x24	; 36
     124:	b0 e0       	ldi	r27, 0x00	; 0
     126:	e4 e2       	ldi	r30, 0x24	; 36
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	80 62       	ori	r24, 0x20	; 32
     12e:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     130:	a5 e2       	ldi	r26, 0x25	; 37
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	e5 e2       	ldi	r30, 0x25	; 37
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	80 62       	ori	r24, 0x20	; 32
     13c:	8c 93       	st	X, r24
}
     13e:	cf 91       	pop	r28
     140:	df 91       	pop	r29
     142:	08 95       	ret

00000144 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     14c:	a4 e2       	ldi	r26, 0x24	; 36
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	e4 e2       	ldi	r30, 0x24	; 36
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 64       	ori	r24, 0x40	; 64
     158:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     15a:	a5 e2       	ldi	r26, 0x25	; 37
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	e5 e2       	ldi	r30, 0x25	; 37
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 64       	ori	r24, 0x40	; 64
     166:	8c 93       	st	X, r24
}
     168:	cf 91       	pop	r28
     16a:	df 91       	pop	r29
     16c:	08 95       	ret

0000016e <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
     16e:	df 93       	push	r29
     170:	cf 93       	push	r28
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     176:	a4 e2       	ldi	r26, 0x24	; 36
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	e4 e2       	ldi	r30, 0x24	; 36
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	80 68       	ori	r24, 0x80	; 128
     182:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     184:	a5 e2       	ldi	r26, 0x25	; 37
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	e5 e2       	ldi	r30, 0x25	; 37
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	80 68       	ori	r24, 0x80	; 128
     190:	8c 93       	st	X, r24
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     1a0:	a1 e2       	ldi	r26, 0x21	; 33
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e1 e2       	ldi	r30, 0x21	; 33
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	8f 60       	ori	r24, 0x0F	; 15
     1ac:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     1ae:	a2 e2       	ldi	r26, 0x22	; 34
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e2 e2       	ldi	r30, 0x22	; 34
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1bc:	aa e0       	ldi	r26, 0x0A	; 10
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	ea e0       	ldi	r30, 0x0A	; 10
     1c2:	f1 e0       	ldi	r31, 0x01	; 1
     1c4:	80 81       	ld	r24, Z
     1c6:	88 61       	ori	r24, 0x18	; 24
     1c8:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     1ca:	ab e0       	ldi	r26, 0x0B	; 11
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	eb e0       	ldi	r30, 0x0B	; 11
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	80 81       	ld	r24, Z
     1d4:	88 61       	ori	r24, 0x18	; 24
     1d6:	8c 93       	st	X, r24
}
     1d8:	cf 91       	pop	r28
     1da:	df 91       	pop	r29
     1dc:	08 95       	ret

000001de <port_init>:

//Initialize the ports
void port_init(void)
{
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     1e6:	0e 94 8d 00 	call	0x11a	; 0x11a <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
     1ea:	0e 94 a2 00 	call	0x144	; 0x144 <servo2_pin_config>
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
     1ee:	0e 94 b7 00 	call	0x16e	; 0x16e <servo3_pin_config>
 motion_pin_config(); //Configure pins required for motion control
     1f2:	0e 94 cc 00 	call	0x198	; 0x198 <motion_pin_config>
}
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz 
void timer1_init(void)
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
     204:	e1 e8       	ldi	r30, 0x81	; 129
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     20a:	e5 e8       	ldi	r30, 0x85	; 133
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	8c ef       	ldi	r24, 0xFC	; 252
     210:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     212:	e4 e8       	ldi	r30, 0x84	; 132
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     21a:	e9 e8       	ldi	r30, 0x89	; 137
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     222:	e8 e8       	ldi	r30, 0x88	; 136
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     22a:	eb e8       	ldi	r30, 0x8B	; 139
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     232:	ea e8       	ldi	r30, 0x8A	; 138
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	80 83       	st	Z, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     23a:	ed e8       	ldi	r30, 0x8D	; 141
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     242:	ec e8       	ldi	r30, 0x8C	; 140
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	8f ef       	ldi	r24, 0xFF	; 255
     248:	80 83       	st	Z, r24
 ICR1H  = 0x03;	
     24a:	e7 e8       	ldi	r30, 0x87	; 135
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
     252:	e6 e8       	ldi	r30, 0x86	; 134
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     25a:	e0 e8       	ldi	r30, 0x80	; 128
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	8b ea       	ldi	r24, 0xAB	; 171
     260:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     262:	e2 e8       	ldi	r30, 0x82	; 130
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     268:	e1 e8       	ldi	r30, 0x81	; 129
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	8c e0       	ldi	r24, 0x0C	; 12
     26e:	80 83       	st	Z, r24
}
     270:	cf 91       	pop	r28
     272:	df 91       	pop	r29
     274:	08 95       	ret

00000276 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
     276:	df 93       	push	r29
     278:	cf 93       	push	r28
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     27e:	e1 e2       	ldi	r30, 0x21	; 33
     280:	f1 e0       	ldi	r31, 0x01	; 1
     282:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     284:	e5 e2       	ldi	r30, 0x25	; 37
     286:	f1 e0       	ldi	r31, 0x01	; 1
     288:	8f ef       	ldi	r24, 0xFF	; 255
     28a:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     28c:	e4 e2       	ldi	r30, 0x24	; 36
     28e:	f1 e0       	ldi	r31, 0x01	; 1
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     294:	e9 e2       	ldi	r30, 0x29	; 41
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     29a:	e8 e2       	ldi	r30, 0x28	; 40
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	8f ef       	ldi	r24, 0xFF	; 255
     2a0:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     2a2:	eb e2       	ldi	r30, 0x2B	; 43
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     2a8:	ea e2       	ldi	r30, 0x2A	; 42
     2aa:	f1 e0       	ldi	r31, 0x01	; 1
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     2b0:	ed e2       	ldi	r30, 0x2D	; 45
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     2b6:	ec e2       	ldi	r30, 0x2C	; 44
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     2be:	e0 e2       	ldi	r30, 0x20	; 32
     2c0:	f1 e0       	ldi	r31, 0x01	; 1
     2c2:	89 ea       	ldi	r24, 0xA9	; 169
     2c4:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     2c6:	e1 e2       	ldi	r30, 0x21	; 33
     2c8:	f1 e0       	ldi	r31, 0x01	; 1
     2ca:	8b e0       	ldi	r24, 0x0B	; 11
     2cc:	80 83       	st	Z, r24
}
     2ce:	cf 91       	pop	r28
     2d0:	df 91       	pop	r29
     2d2:	08 95       	ret

000002d4 <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
     2d4:	df 93       	push	r29
     2d6:	cf 93       	push	r28
     2d8:	0f 92       	push	r0
     2da:	0f 92       	push	r0
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     2e4:	e8 e2       	ldi	r30, 0x28	; 40
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     2ec:	ea e2       	ldi	r30, 0x2A	; 42
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	80 83       	st	Z, r24
}
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	cf 91       	pop	r28
     2fa:	df 91       	pop	r29
     2fc:	08 95       	ret

000002fe <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	0f 92       	push	r0
     304:	0f 92       	push	r0
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     30c:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     30e:	8a 81       	ldd	r24, Y+2	; 0x02
     310:	8f 70       	andi	r24, 0x0F	; 15
     312:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     314:	e2 e2       	ldi	r30, 0x22	; 34
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	80 7f       	andi	r24, 0xF0	; 240
     320:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     322:	99 81       	ldd	r25, Y+1	; 0x01
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	89 2b       	or	r24, r25
     328:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     32a:	e2 e2       	ldi	r30, 0x22	; 34
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	80 83       	st	Z, r24
}
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	cf 91       	pop	r28
     338:	df 91       	pop	r29
     33a:	08 95       	ret

0000033c <forward>:


void forward (void) //both wheels forward
{
     33c:	df 93       	push	r29
     33e:	cf 93       	push	r28
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     34a:	cf 91       	pop	r28
     34c:	df 91       	pop	r29
     34e:	08 95       	ret

00000350 <back>:

void back (void) //both wheels backward
{
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     358:	89 e0       	ldi	r24, 0x09	; 9
     35a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     35e:	cf 91       	pop	r28
     360:	df 91       	pop	r29
     362:	08 95       	ret

00000364 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     364:	df 93       	push	r29
     366:	cf 93       	push	r28
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     36c:	85 e0       	ldi	r24, 0x05	; 5
     36e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     372:	cf 91       	pop	r28
     374:	df 91       	pop	r29
     376:	08 95       	ret

00000378 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     380:	8a e0       	ldi	r24, 0x0A	; 10
     382:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     386:	cf 91       	pop	r28
     388:	df 91       	pop	r29
     38a:	08 95       	ret

0000038c <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     394:	84 e0       	ldi	r24, 0x04	; 4
     396:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     39a:	cf 91       	pop	r28
     39c:	df 91       	pop	r29
     39e:	08 95       	ret

000003a0 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     3c2:	cf 91       	pop	r28
     3c4:	df 91       	pop	r29
     3c6:	08 95       	ret

000003c8 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     3d0:	88 e0       	ldi	r24, 0x08	; 8
     3d2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     3d6:	cf 91       	pop	r28
     3d8:	df 91       	pop	r29
     3da:	08 95       	ret

000003dc <stop>:

void stop (void)
{
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     3ea:	cf 91       	pop	r28
     3ec:	df 91       	pop	r29
     3ee:	08 95       	ret

000003f0 <init_devices>:



//Function to initialize all the peripherals
void init_devices(void)
{
     3f0:	df 93       	push	r29
     3f2:	cf 93       	push	r28
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
     3f8:	f8 94       	cli
 port_init();
     3fa:	0e 94 ef 00 	call	0x1de	; 0x1de <port_init>
 timer1_init();
     3fe:	0e 94 fe 00 	call	0x1fc	; 0x1fc <timer1_init>
 timer5_init();
     402:	0e 94 3b 01 	call	0x276	; 0x276 <timer5_init>
 sei(); //re-enable interrupts 
     406:	78 94       	sei
}
     408:	cf 91       	pop	r28
     40a:	df 91       	pop	r29
     40c:	08 95       	ret

0000040e <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	00 d0       	rcall	.+0      	; 0x418 <servo_1+0xa>
     418:	0f 92       	push	r0
     41a:	0f 92       	push	r0
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	a0 e0       	ldi	r26, 0x00	; 0
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	ab 83       	std	Y+3, r26	; 0x03
     430:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees / 1.86) + 35.0;
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	a0 e0       	ldi	r26, 0x00	; 0
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	bc 01       	movw	r22, r24
     43e:	cd 01       	movw	r24, r26
     440:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__floatunsisf>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	bc 01       	movw	r22, r24
     44a:	cd 01       	movw	r24, r26
     44c:	2b e7       	ldi	r18, 0x7B	; 123
     44e:	34 e1       	ldi	r19, 0x14	; 20
     450:	4e ee       	ldi	r20, 0xEE	; 238
     452:	5f e3       	ldi	r21, 0x3F	; 63
     454:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__divsf3>
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	bc 01       	movw	r22, r24
     45e:	cd 01       	movw	r24, r26
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	4c e0       	ldi	r20, 0x0C	; 12
     466:	52 e4       	ldi	r21, 0x42	; 66
     468:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__addsf3>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	9a 83       	std	Y+2, r25	; 0x02
     474:	ab 83       	std	Y+3, r26	; 0x03
     476:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
     478:	e9 e8       	ldi	r30, 0x89	; 137
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
     47e:	08 e8       	ldi	r16, 0x88	; 136
     480:	10 e0       	ldi	r17, 0x00	; 0
     482:	69 81       	ldd	r22, Y+1	; 0x01
     484:	7a 81       	ldd	r23, Y+2	; 0x02
     486:	8b 81       	ldd	r24, Y+3	; 0x03
     488:	9c 81       	ldd	r25, Y+4	; 0x04
     48a:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	f8 01       	movw	r30, r16
     494:	80 83       	st	Z, r24
}
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	cf 91       	pop	r28
     4a2:	df 91       	pop	r29
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	08 95       	ret

000004aa <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <servo_2+0xa>
     4b4:	0f 92       	push	r0
     4b6:	0f 92       	push	r0
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	a0 e0       	ldi	r26, 0x00	; 0
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	9a 83       	std	Y+2, r25	; 0x02
     4ca:	ab 83       	std	Y+3, r26	; 0x03
     4cc:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     4ce:	8d 81       	ldd	r24, Y+5	; 0x05
     4d0:	88 2f       	mov	r24, r24
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	bc 01       	movw	r22, r24
     4da:	cd 01       	movw	r24, r26
     4dc:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__floatunsisf>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	bc 01       	movw	r22, r24
     4e6:	cd 01       	movw	r24, r26
     4e8:	2b e7       	ldi	r18, 0x7B	; 123
     4ea:	34 e1       	ldi	r19, 0x14	; 20
     4ec:	4e ee       	ldi	r20, 0xEE	; 238
     4ee:	5f e3       	ldi	r21, 0x3F	; 63
     4f0:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__divsf3>
     4f4:	dc 01       	movw	r26, r24
     4f6:	cb 01       	movw	r24, r22
     4f8:	bc 01       	movw	r22, r24
     4fa:	cd 01       	movw	r24, r26
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	4c e0       	ldi	r20, 0x0C	; 12
     502:	52 e4       	ldi	r21, 0x42	; 66
     504:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__addsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	89 83       	std	Y+1, r24	; 0x01
     50e:	9a 83       	std	Y+2, r25	; 0x02
     510:	ab 83       	std	Y+3, r26	; 0x03
     512:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
     514:	eb e8       	ldi	r30, 0x8B	; 139
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     51a:	0a e8       	ldi	r16, 0x8A	; 138
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	69 81       	ldd	r22, Y+1	; 0x01
     520:	7a 81       	ldd	r23, Y+2	; 0x02
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	f8 01       	movw	r30, r16
     530:	80 83       	st	Z, r24
}
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	00 d0       	rcall	.+0      	; 0x550 <servo_3+0xa>
     550:	0f 92       	push	r0
     552:	0f 92       	push	r0
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	9a 83       	std	Y+2, r25	; 0x02
     566:	ab 83       	std	Y+3, r26	; 0x03
     568:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees / 1.86) + 35.0;
     56a:	8d 81       	ldd	r24, Y+5	; 0x05
     56c:	88 2f       	mov	r24, r24
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	a0 e0       	ldi	r26, 0x00	; 0
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__floatunsisf>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	2b e7       	ldi	r18, 0x7B	; 123
     586:	34 e1       	ldi	r19, 0x14	; 20
     588:	4e ee       	ldi	r20, 0xEE	; 238
     58a:	5f e3       	ldi	r21, 0x3F	; 63
     58c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__divsf3>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	bc 01       	movw	r22, r24
     596:	cd 01       	movw	r24, r26
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	4c e0       	ldi	r20, 0x0C	; 12
     59e:	52 e4       	ldi	r21, 0x42	; 66
     5a0:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__addsf3>
     5a4:	dc 01       	movw	r26, r24
     5a6:	cb 01       	movw	r24, r22
     5a8:	89 83       	std	Y+1, r24	; 0x01
     5aa:	9a 83       	std	Y+2, r25	; 0x02
     5ac:	ab 83       	std	Y+3, r26	; 0x03
     5ae:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
     5b0:	ed e8       	ldi	r30, 0x8D	; 141
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
     5b6:	0c e8       	ldi	r16, 0x8C	; 140
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	69 81       	ldd	r22, Y+1	; 0x01
     5bc:	7a 81       	ldd	r23, Y+2	; 0x02
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	9c 81       	ldd	r25, Y+4	; 0x04
     5c2:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     5c6:	dc 01       	movw	r26, r24
     5c8:	cb 01       	movw	r24, r22
     5ca:	f8 01       	movw	r30, r16
     5cc:	80 83       	st	Z, r24
}
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	cf 91       	pop	r28
     5da:	df 91       	pop	r29
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	08 95       	ret

000005e2 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
     5ea:	e9 e8       	ldi	r30, 0x89	; 137
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
     5f2:	e8 e8       	ldi	r30, 0x88	; 136
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	80 83       	st	Z, r24
}
     5fa:	cf 91       	pop	r28
     5fc:	df 91       	pop	r29
     5fe:	08 95       	ret

00000600 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
     608:	eb e8       	ldi	r30, 0x8B	; 139
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	80 83       	st	Z, r24
 OCR1BL = 0xFF; //Servo 2 off
     610:	ea e8       	ldi	r30, 0x8A	; 138
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	80 83       	st	Z, r24
}
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
     626:	ed e8       	ldi	r30, 0x8D	; 141
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	80 83       	st	Z, r24
 OCR1CL = 0xFF; //Servo 3 off
     62e:	ec e8       	ldi	r30, 0x8C	; 140
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	80 83       	st	Z, r24
} 
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	08 95       	ret

0000063c <object_ungrip>:

void object_ungrip (void) // grip the object
{
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	2e 97       	sbiw	r28, 0x0e	; 14
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
 servo_1 (10);
     650:	8a e0       	ldi	r24, 0x0A	; 10
     652:	0e 94 07 02 	call	0x40e	; 0x40e <servo_1>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	aa e7       	ldi	r26, 0x7A	; 122
     65c:	b4 e4       	ldi	r27, 0x44	; 68
     65e:	8b 87       	std	Y+11, r24	; 0x0b
     660:	9c 87       	std	Y+12, r25	; 0x0c
     662:	ad 87       	std	Y+13, r26	; 0x0d
     664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     666:	6b 85       	ldd	r22, Y+11	; 0x0b
     668:	7c 85       	ldd	r23, Y+12	; 0x0c
     66a:	8d 85       	ldd	r24, Y+13	; 0x0d
     66c:	9e 85       	ldd	r25, Y+14	; 0x0e
     66e:	26 e6       	ldi	r18, 0x66	; 102
     670:	36 e6       	ldi	r19, 0x66	; 102
     672:	46 e6       	ldi	r20, 0x66	; 102
     674:	55 e4       	ldi	r21, 0x45	; 69
     676:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	8f 83       	std	Y+7, r24	; 0x07
     680:	98 87       	std	Y+8, r25	; 0x08
     682:	a9 87       	std	Y+9, r26	; 0x09
     684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     686:	6f 81       	ldd	r22, Y+7	; 0x07
     688:	78 85       	ldd	r23, Y+8	; 0x08
     68a:	89 85       	ldd	r24, Y+9	; 0x09
     68c:	9a 85       	ldd	r25, Y+10	; 0x0a
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 e8       	ldi	r20, 0x80	; 128
     694:	5f e3       	ldi	r21, 0x3F	; 63
     696:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
     69a:	88 23       	and	r24, r24
     69c:	2c f4       	brge	.+10     	; 0x6a8 <object_ungrip+0x6c>
		__ticks = 1;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	9e 83       	std	Y+6, r25	; 0x06
     6a4:	8d 83       	std	Y+5, r24	; 0x05
     6a6:	3f c0       	rjmp	.+126    	; 0x726 <object_ungrip+0xea>
	else if (__tmp > 65535)
     6a8:	6f 81       	ldd	r22, Y+7	; 0x07
     6aa:	78 85       	ldd	r23, Y+8	; 0x08
     6ac:	89 85       	ldd	r24, Y+9	; 0x09
     6ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	3f ef       	ldi	r19, 0xFF	; 255
     6b4:	4f e7       	ldi	r20, 0x7F	; 127
     6b6:	57 e4       	ldi	r21, 0x47	; 71
     6b8:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
     6bc:	18 16       	cp	r1, r24
     6be:	4c f5       	brge	.+82     	; 0x712 <object_ungrip+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     6c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     6c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     6c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e2       	ldi	r20, 0x20	; 32
     6ce:	51 e4       	ldi	r21, 0x41	; 65
     6d0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	bc 01       	movw	r22, r24
     6da:	cd 01       	movw	r24, r26
     6dc:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	9e 83       	std	Y+6, r25	; 0x06
     6e6:	8d 83       	std	Y+5, r24	; 0x05
     6e8:	0f c0       	rjmp	.+30     	; 0x708 <object_ungrip+0xcc>
     6ea:	80 e7       	ldi	r24, 0x70	; 112
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9c 83       	std	Y+4, r25	; 0x04
     6f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	9c 81       	ldd	r25, Y+4	; 0x04
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <object_ungrip+0xba>
     6fa:	9c 83       	std	Y+4, r25	; 0x04
     6fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6fe:	8d 81       	ldd	r24, Y+5	; 0x05
     700:	9e 81       	ldd	r25, Y+6	; 0x06
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	9e 83       	std	Y+6, r25	; 0x06
     706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     708:	8d 81       	ldd	r24, Y+5	; 0x05
     70a:	9e 81       	ldd	r25, Y+6	; 0x06
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	69 f7       	brne	.-38     	; 0x6ea <object_ungrip+0xae>
     710:	14 c0       	rjmp	.+40     	; 0x73a <object_ungrip+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     712:	6f 81       	ldd	r22, Y+7	; 0x07
     714:	78 85       	ldd	r23, Y+8	; 0x08
     716:	89 85       	ldd	r24, Y+9	; 0x09
     718:	9a 85       	ldd	r25, Y+10	; 0x0a
     71a:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     71e:	dc 01       	movw	r26, r24
     720:	cb 01       	movw	r24, r22
     722:	9e 83       	std	Y+6, r25	; 0x06
     724:	8d 83       	std	Y+5, r24	; 0x05
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	9e 81       	ldd	r25, Y+6	; 0x06
     72a:	9a 83       	std	Y+2, r25	; 0x02
     72c:	89 83       	std	Y+1, r24	; 0x01
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	9a 81       	ldd	r25, Y+2	; 0x02
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <object_ungrip+0xf6>
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(1000);
}
     73a:	2e 96       	adiw	r28, 0x0e	; 14
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	cf 91       	pop	r28
     748:	df 91       	pop	r29
     74a:	08 95       	ret

0000074c <object_grip>:

void object_grip (void) // relase the object
{
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	2e 97       	sbiw	r28, 0x0e	; 14
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
 servo_1 (145);
     760:	81 e9       	ldi	r24, 0x91	; 145
     762:	0e 94 07 02 	call	0x40e	; 0x40e <servo_1>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	aa e7       	ldi	r26, 0x7A	; 122
     76c:	b4 e4       	ldi	r27, 0x44	; 68
     76e:	8b 87       	std	Y+11, r24	; 0x0b
     770:	9c 87       	std	Y+12, r25	; 0x0c
     772:	ad 87       	std	Y+13, r26	; 0x0d
     774:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     776:	6b 85       	ldd	r22, Y+11	; 0x0b
     778:	7c 85       	ldd	r23, Y+12	; 0x0c
     77a:	8d 85       	ldd	r24, Y+13	; 0x0d
     77c:	9e 85       	ldd	r25, Y+14	; 0x0e
     77e:	26 e6       	ldi	r18, 0x66	; 102
     780:	36 e6       	ldi	r19, 0x66	; 102
     782:	46 e6       	ldi	r20, 0x66	; 102
     784:	55 e4       	ldi	r21, 0x45	; 69
     786:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	8f 83       	std	Y+7, r24	; 0x07
     790:	98 87       	std	Y+8, r25	; 0x08
     792:	a9 87       	std	Y+9, r26	; 0x09
     794:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     796:	6f 81       	ldd	r22, Y+7	; 0x07
     798:	78 85       	ldd	r23, Y+8	; 0x08
     79a:	89 85       	ldd	r24, Y+9	; 0x09
     79c:	9a 85       	ldd	r25, Y+10	; 0x0a
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e8       	ldi	r20, 0x80	; 128
     7a4:	5f e3       	ldi	r21, 0x3F	; 63
     7a6:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
     7aa:	88 23       	and	r24, r24
     7ac:	2c f4       	brge	.+10     	; 0x7b8 <object_grip+0x6c>
		__ticks = 1;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	9e 83       	std	Y+6, r25	; 0x06
     7b4:	8d 83       	std	Y+5, r24	; 0x05
     7b6:	3f c0       	rjmp	.+126    	; 0x836 <object_grip+0xea>
	else if (__tmp > 65535)
     7b8:	6f 81       	ldd	r22, Y+7	; 0x07
     7ba:	78 85       	ldd	r23, Y+8	; 0x08
     7bc:	89 85       	ldd	r24, Y+9	; 0x09
     7be:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	3f ef       	ldi	r19, 0xFF	; 255
     7c4:	4f e7       	ldi	r20, 0x7F	; 127
     7c6:	57 e4       	ldi	r21, 0x47	; 71
     7c8:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
     7cc:	18 16       	cp	r1, r24
     7ce:	4c f5       	brge	.+82     	; 0x822 <object_grip+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d0:	6b 85       	ldd	r22, Y+11	; 0x0b
     7d2:	7c 85       	ldd	r23, Y+12	; 0x0c
     7d4:	8d 85       	ldd	r24, Y+13	; 0x0d
     7d6:	9e 85       	ldd	r25, Y+14	; 0x0e
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e2       	ldi	r20, 0x20	; 32
     7de:	51 e4       	ldi	r21, 0x41	; 65
     7e0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	bc 01       	movw	r22, r24
     7ea:	cd 01       	movw	r24, r26
     7ec:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	9e 83       	std	Y+6, r25	; 0x06
     7f6:	8d 83       	std	Y+5, r24	; 0x05
     7f8:	0f c0       	rjmp	.+30     	; 0x818 <object_grip+0xcc>
     7fa:	80 e7       	ldi	r24, 0x70	; 112
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	8b 83       	std	Y+3, r24	; 0x03
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	9c 81       	ldd	r25, Y+4	; 0x04
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <object_grip+0xba>
     80a:	9c 83       	std	Y+4, r25	; 0x04
     80c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     80e:	8d 81       	ldd	r24, Y+5	; 0x05
     810:	9e 81       	ldd	r25, Y+6	; 0x06
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	9e 83       	std	Y+6, r25	; 0x06
     816:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	9e 81       	ldd	r25, Y+6	; 0x06
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	69 f7       	brne	.-38     	; 0x7fa <object_grip+0xae>
     820:	14 c0       	rjmp	.+40     	; 0x84a <object_grip+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     822:	6f 81       	ldd	r22, Y+7	; 0x07
     824:	78 85       	ldd	r23, Y+8	; 0x08
     826:	89 85       	ldd	r24, Y+9	; 0x09
     828:	9a 85       	ldd	r25, Y+10	; 0x0a
     82a:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     82e:	dc 01       	movw	r26, r24
     830:	cb 01       	movw	r24, r22
     832:	9e 83       	std	Y+6, r25	; 0x06
     834:	8d 83       	std	Y+5, r24	; 0x05
     836:	8d 81       	ldd	r24, Y+5	; 0x05
     838:	9e 81       	ldd	r25, Y+6	; 0x06
     83a:	9a 83       	std	Y+2, r25	; 0x02
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	9a 81       	ldd	r25, Y+2	; 0x02
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <object_grip+0xf6>
     846:	9a 83       	std	Y+2, r25	; 0x02
     848:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(1000);

}
     84a:	2e 96       	adiw	r28, 0x0e	; 14
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	cf 91       	pop	r28
     858:	df 91       	pop	r29
     85a:	08 95       	ret

0000085c <main>:


//Main function
int main(void)
{
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	cc 58       	subi	r28, 0x8C	; 140
     86a:	d0 40       	sbci	r29, 0x00	; 0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
 init_devices();
     876:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <init_devices>
 	
 while (1)
 { 
  
 object_ungrip(); 
     87a:	0e 94 1e 03 	call	0x63c	; 0x63c <object_ungrip>
 
 forward();
     87e:	0e 94 9e 01 	call	0x33c	; 0x33c <forward>
     882:	fe 01       	movw	r30, r28
     884:	e7 57       	subi	r30, 0x77	; 119
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e4       	ldi	r25, 0x40	; 64
     88c:	ac e1       	ldi	r26, 0x1C	; 28
     88e:	b5 e4       	ldi	r27, 0x45	; 69
     890:	80 83       	st	Z, r24
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	a2 83       	std	Z+2, r26	; 0x02
     896:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     898:	8e 01       	movw	r16, r28
     89a:	0b 57       	subi	r16, 0x7B	; 123
     89c:	1f 4f       	sbci	r17, 0xFF	; 255
     89e:	fe 01       	movw	r30, r28
     8a0:	e7 57       	subi	r30, 0x77	; 119
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	60 81       	ld	r22, Z
     8a6:	71 81       	ldd	r23, Z+1	; 0x01
     8a8:	82 81       	ldd	r24, Z+2	; 0x02
     8aa:	93 81       	ldd	r25, Z+3	; 0x03
     8ac:	26 e6       	ldi	r18, 0x66	; 102
     8ae:	36 e6       	ldi	r19, 0x66	; 102
     8b0:	46 e6       	ldi	r20, 0x66	; 102
     8b2:	55 e4       	ldi	r21, 0x45	; 69
     8b4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     8b8:	dc 01       	movw	r26, r24
     8ba:	cb 01       	movw	r24, r22
     8bc:	f8 01       	movw	r30, r16
     8be:	80 83       	st	Z, r24
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	a2 83       	std	Z+2, r26	; 0x02
     8c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8c6:	fe 01       	movw	r30, r28
     8c8:	eb 57       	subi	r30, 0x7B	; 123
     8ca:	ff 4f       	sbci	r31, 0xFF	; 255
     8cc:	60 81       	ld	r22, Z
     8ce:	71 81       	ldd	r23, Z+1	; 0x01
     8d0:	82 81       	ldd	r24, Z+2	; 0x02
     8d2:	93 81       	ldd	r25, Z+3	; 0x03
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e8       	ldi	r20, 0x80	; 128
     8da:	5f e3       	ldi	r21, 0x3F	; 63
     8dc:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
     8e0:	88 23       	and	r24, r24
     8e2:	44 f4       	brge	.+16     	; 0x8f4 <main+0x98>
		__ticks = 1;
     8e4:	fe 01       	movw	r30, r28
     8e6:	ed 57       	subi	r30, 0x7D	; 125
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	80 83       	st	Z, r24
     8f2:	64 c0       	rjmp	.+200    	; 0x9bc <main+0x160>
	else if (__tmp > 65535)
     8f4:	fe 01       	movw	r30, r28
     8f6:	eb 57       	subi	r30, 0x7B	; 123
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	60 81       	ld	r22, Z
     8fc:	71 81       	ldd	r23, Z+1	; 0x01
     8fe:	82 81       	ldd	r24, Z+2	; 0x02
     900:	93 81       	ldd	r25, Z+3	; 0x03
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	3f ef       	ldi	r19, 0xFF	; 255
     906:	4f e7       	ldi	r20, 0x7F	; 127
     908:	57 e4       	ldi	r21, 0x47	; 71
     90a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
     90e:	18 16       	cp	r1, r24
     910:	0c f0       	brlt	.+2      	; 0x914 <main+0xb8>
     912:	43 c0       	rjmp	.+134    	; 0x99a <main+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     914:	fe 01       	movw	r30, r28
     916:	e7 57       	subi	r30, 0x77	; 119
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	60 81       	ld	r22, Z
     91c:	71 81       	ldd	r23, Z+1	; 0x01
     91e:	82 81       	ldd	r24, Z+2	; 0x02
     920:	93 81       	ldd	r25, Z+3	; 0x03
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e2       	ldi	r20, 0x20	; 32
     928:	51 e4       	ldi	r21, 0x41	; 65
     92a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	8e 01       	movw	r16, r28
     934:	0d 57       	subi	r16, 0x7D	; 125
     936:	1f 4f       	sbci	r17, 0xFF	; 255
     938:	bc 01       	movw	r22, r24
     93a:	cd 01       	movw	r24, r26
     93c:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     940:	dc 01       	movw	r26, r24
     942:	cb 01       	movw	r24, r22
     944:	f8 01       	movw	r30, r16
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
     94a:	1f c0       	rjmp	.+62     	; 0x98a <main+0x12e>
     94c:	fe 01       	movw	r30, r28
     94e:	ef 57       	subi	r30, 0x7F	; 127
     950:	ff 4f       	sbci	r31, 0xFF	; 255
     952:	80 e7       	ldi	r24, 0x70	; 112
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	91 83       	std	Z+1, r25	; 0x01
     958:	80 83       	st	Z, r24
     95a:	fe 01       	movw	r30, r28
     95c:	ef 57       	subi	r30, 0x7F	; 127
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <main+0x108>
     968:	fe 01       	movw	r30, r28
     96a:	ef 57       	subi	r30, 0x7F	; 127
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	91 83       	std	Z+1, r25	; 0x01
     970:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     972:	de 01       	movw	r26, r28
     974:	ad 57       	subi	r26, 0x7D	; 125
     976:	bf 4f       	sbci	r27, 0xFF	; 255
     978:	fe 01       	movw	r30, r28
     97a:	ed 57       	subi	r30, 0x7D	; 125
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	11 96       	adiw	r26, 0x01	; 1
     986:	9c 93       	st	X, r25
     988:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     98a:	fe 01       	movw	r30, r28
     98c:	ed 57       	subi	r30, 0x7D	; 125
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	80 81       	ld	r24, Z
     992:	91 81       	ldd	r25, Z+1	; 0x01
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	d1 f6       	brne	.-76     	; 0x94c <main+0xf0>
     998:	27 c0       	rjmp	.+78     	; 0x9e8 <main+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     99a:	8e 01       	movw	r16, r28
     99c:	0d 57       	subi	r16, 0x7D	; 125
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	fe 01       	movw	r30, r28
     9a2:	eb 57       	subi	r30, 0x7B	; 123
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	60 81       	ld	r22, Z
     9a8:	71 81       	ldd	r23, Z+1	; 0x01
     9aa:	82 81       	ldd	r24, Z+2	; 0x02
     9ac:	93 81       	ldd	r25, Z+3	; 0x03
     9ae:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	f8 01       	movw	r30, r16
     9b8:	91 83       	std	Z+1, r25	; 0x01
     9ba:	80 83       	st	Z, r24
     9bc:	de 01       	movw	r26, r28
     9be:	a1 58       	subi	r26, 0x81	; 129
     9c0:	bf 4f       	sbci	r27, 0xFF	; 255
     9c2:	fe 01       	movw	r30, r28
     9c4:	ed 57       	subi	r30, 0x7D	; 125
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	80 81       	ld	r24, Z
     9ca:	91 81       	ldd	r25, Z+1	; 0x01
     9cc:	8d 93       	st	X+, r24
     9ce:	9c 93       	st	X, r25
     9d0:	fe 01       	movw	r30, r28
     9d2:	e1 58       	subi	r30, 0x81	; 129
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <main+0x17e>
     9de:	fe 01       	movw	r30, r28
     9e0:	e1 58       	subi	r30, 0x81	; 129
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	91 83       	std	Z+1, r25	; 0x01
     9e6:	80 83       	st	Z, r24
 _delay_ms(2500);
 stop();
     9e8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>

 object_grip();
     9ec:	0e 94 a6 03 	call	0x74c	; 0x74c <object_grip>

 back();
     9f0:	0e 94 a8 01 	call	0x350	; 0x350 <back>
     9f4:	fe 01       	movw	r30, r28
     9f6:	e5 58       	subi	r30, 0x85	; 133
     9f8:	ff 4f       	sbci	r31, 0xFF	; 255
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	aa ef       	ldi	r26, 0xFA	; 250
     a00:	b3 e4       	ldi	r27, 0x43	; 67
     a02:	80 83       	st	Z, r24
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	a2 83       	std	Z+2, r26	; 0x02
     a08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a0a:	8e 01       	movw	r16, r28
     a0c:	09 58       	subi	r16, 0x89	; 137
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	fe 01       	movw	r30, r28
     a12:	e5 58       	subi	r30, 0x85	; 133
     a14:	ff 4f       	sbci	r31, 0xFF	; 255
     a16:	60 81       	ld	r22, Z
     a18:	71 81       	ldd	r23, Z+1	; 0x01
     a1a:	82 81       	ldd	r24, Z+2	; 0x02
     a1c:	93 81       	ldd	r25, Z+3	; 0x03
     a1e:	26 e6       	ldi	r18, 0x66	; 102
     a20:	36 e6       	ldi	r19, 0x66	; 102
     a22:	46 e6       	ldi	r20, 0x66	; 102
     a24:	55 e4       	ldi	r21, 0x45	; 69
     a26:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     a2a:	dc 01       	movw	r26, r24
     a2c:	cb 01       	movw	r24, r22
     a2e:	f8 01       	movw	r30, r16
     a30:	80 83       	st	Z, r24
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	a2 83       	std	Z+2, r26	; 0x02
     a36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a38:	fe 01       	movw	r30, r28
     a3a:	e9 58       	subi	r30, 0x89	; 137
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	60 81       	ld	r22, Z
     a40:	71 81       	ldd	r23, Z+1	; 0x01
     a42:	82 81       	ldd	r24, Z+2	; 0x02
     a44:	93 81       	ldd	r25, Z+3	; 0x03
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e8       	ldi	r20, 0x80	; 128
     a4c:	5f e3       	ldi	r21, 0x3F	; 63
     a4e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
     a52:	88 23       	and	r24, r24
     a54:	44 f4       	brge	.+16     	; 0xa66 <main+0x20a>
		__ticks = 1;
     a56:	fe 01       	movw	r30, r28
     a58:	eb 58       	subi	r30, 0x8B	; 139
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	91 83       	std	Z+1, r25	; 0x01
     a62:	80 83       	st	Z, r24
     a64:	64 c0       	rjmp	.+200    	; 0xb2e <main+0x2d2>
	else if (__tmp > 65535)
     a66:	fe 01       	movw	r30, r28
     a68:	e9 58       	subi	r30, 0x89	; 137
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	60 81       	ld	r22, Z
     a6e:	71 81       	ldd	r23, Z+1	; 0x01
     a70:	82 81       	ldd	r24, Z+2	; 0x02
     a72:	93 81       	ldd	r25, Z+3	; 0x03
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	3f ef       	ldi	r19, 0xFF	; 255
     a78:	4f e7       	ldi	r20, 0x7F	; 127
     a7a:	57 e4       	ldi	r21, 0x47	; 71
     a7c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
     a80:	18 16       	cp	r1, r24
     a82:	0c f0       	brlt	.+2      	; 0xa86 <main+0x22a>
     a84:	43 c0       	rjmp	.+134    	; 0xb0c <main+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a86:	fe 01       	movw	r30, r28
     a88:	e5 58       	subi	r30, 0x85	; 133
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	60 81       	ld	r22, Z
     a8e:	71 81       	ldd	r23, Z+1	; 0x01
     a90:	82 81       	ldd	r24, Z+2	; 0x02
     a92:	93 81       	ldd	r25, Z+3	; 0x03
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	40 e2       	ldi	r20, 0x20	; 32
     a9a:	51 e4       	ldi	r21, 0x41	; 65
     a9c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	8e 01       	movw	r16, r28
     aa6:	0b 58       	subi	r16, 0x8B	; 139
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	bc 01       	movw	r22, r24
     aac:	cd 01       	movw	r24, r26
     aae:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     ab2:	dc 01       	movw	r26, r24
     ab4:	cb 01       	movw	r24, r22
     ab6:	f8 01       	movw	r30, r16
     ab8:	91 83       	std	Z+1, r25	; 0x01
     aba:	80 83       	st	Z, r24
     abc:	1f c0       	rjmp	.+62     	; 0xafc <main+0x2a0>
     abe:	fe 01       	movw	r30, r28
     ac0:	ed 58       	subi	r30, 0x8D	; 141
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	80 e7       	ldi	r24, 0x70	; 112
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	91 83       	std	Z+1, r25	; 0x01
     aca:	80 83       	st	Z, r24
     acc:	fe 01       	movw	r30, r28
     ace:	ed 58       	subi	r30, 0x8D	; 141
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <main+0x27a>
     ada:	fe 01       	movw	r30, r28
     adc:	ed 58       	subi	r30, 0x8D	; 141
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	91 83       	std	Z+1, r25	; 0x01
     ae2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae4:	de 01       	movw	r26, r28
     ae6:	ab 58       	subi	r26, 0x8B	; 139
     ae8:	bf 4f       	sbci	r27, 0xFF	; 255
     aea:	fe 01       	movw	r30, r28
     aec:	eb 58       	subi	r30, 0x8B	; 139
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	80 81       	ld	r24, Z
     af2:	91 81       	ldd	r25, Z+1	; 0x01
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	11 96       	adiw	r26, 0x01	; 1
     af8:	9c 93       	st	X, r25
     afa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     afc:	fe 01       	movw	r30, r28
     afe:	eb 58       	subi	r30, 0x8B	; 139
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	80 81       	ld	r24, Z
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	00 97       	sbiw	r24, 0x00	; 0
     b08:	d1 f6       	brne	.-76     	; 0xabe <main+0x262>
     b0a:	27 c0       	rjmp	.+78     	; 0xb5a <main+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b0c:	8e 01       	movw	r16, r28
     b0e:	0b 58       	subi	r16, 0x8B	; 139
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
     b12:	fe 01       	movw	r30, r28
     b14:	e9 58       	subi	r30, 0x89	; 137
     b16:	ff 4f       	sbci	r31, 0xFF	; 255
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	82 81       	ldd	r24, Z+2	; 0x02
     b1e:	93 81       	ldd	r25, Z+3	; 0x03
     b20:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	f8 01       	movw	r30, r16
     b2a:	91 83       	std	Z+1, r25	; 0x01
     b2c:	80 83       	st	Z, r24
     b2e:	de 01       	movw	r26, r28
     b30:	af 58       	subi	r26, 0x8F	; 143
     b32:	bf 4f       	sbci	r27, 0xFF	; 255
     b34:	fe 01       	movw	r30, r28
     b36:	eb 58       	subi	r30, 0x8B	; 139
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	80 81       	ld	r24, Z
     b3c:	91 81       	ldd	r25, Z+1	; 0x01
     b3e:	8d 93       	st	X+, r24
     b40:	9c 93       	st	X, r25
     b42:	fe 01       	movw	r30, r28
     b44:	ef 58       	subi	r30, 0x8F	; 143
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
     b48:	80 81       	ld	r24, Z
     b4a:	91 81       	ldd	r25, Z+1	; 0x01
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <main+0x2f0>
     b50:	fe 01       	movw	r30, r28
     b52:	ef 58       	subi	r30, 0x8F	; 143
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	91 83       	std	Z+1, r25	; 0x01
     b58:	80 83       	st	Z, r24
 _delay_ms(500);
 stop();
     b5a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>
     b5e:	fe 01       	movw	r30, r28
     b60:	e3 59       	subi	r30, 0x93	; 147
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	aa e7       	ldi	r26, 0x7A	; 122
     b6a:	b3 e4       	ldi	r27, 0x43	; 67
     b6c:	80 83       	st	Z, r24
     b6e:	91 83       	std	Z+1, r25	; 0x01
     b70:	a2 83       	std	Z+2, r26	; 0x02
     b72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b74:	8e 01       	movw	r16, r28
     b76:	07 59       	subi	r16, 0x97	; 151
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
     b7a:	fe 01       	movw	r30, r28
     b7c:	e3 59       	subi	r30, 0x93	; 147
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	60 81       	ld	r22, Z
     b82:	71 81       	ldd	r23, Z+1	; 0x01
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	26 e6       	ldi	r18, 0x66	; 102
     b8a:	36 e6       	ldi	r19, 0x66	; 102
     b8c:	46 e6       	ldi	r20, 0x66	; 102
     b8e:	55 e4       	ldi	r21, 0x45	; 69
     b90:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	f8 01       	movw	r30, r16
     b9a:	80 83       	st	Z, r24
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	a2 83       	std	Z+2, r26	; 0x02
     ba0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ba2:	fe 01       	movw	r30, r28
     ba4:	e7 59       	subi	r30, 0x97	; 151
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	44 f4       	brge	.+16     	; 0xbd0 <main+0x374>
		__ticks = 1;
     bc0:	fe 01       	movw	r30, r28
     bc2:	e9 59       	subi	r30, 0x99	; 153
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	91 83       	std	Z+1, r25	; 0x01
     bcc:	80 83       	st	Z, r24
     bce:	64 c0       	rjmp	.+200    	; 0xc98 <main+0x43c>
	else if (__tmp > 65535)
     bd0:	fe 01       	movw	r30, r28
     bd2:	e7 59       	subi	r30, 0x97	; 151
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	60 81       	ld	r22, Z
     bd8:	71 81       	ldd	r23, Z+1	; 0x01
     bda:	82 81       	ldd	r24, Z+2	; 0x02
     bdc:	93 81       	ldd	r25, Z+3	; 0x03
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	3f ef       	ldi	r19, 0xFF	; 255
     be2:	4f e7       	ldi	r20, 0x7F	; 127
     be4:	57 e4       	ldi	r21, 0x47	; 71
     be6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
     bea:	18 16       	cp	r1, r24
     bec:	0c f0       	brlt	.+2      	; 0xbf0 <main+0x394>
     bee:	43 c0       	rjmp	.+134    	; 0xc76 <main+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf0:	fe 01       	movw	r30, r28
     bf2:	e3 59       	subi	r30, 0x93	; 147
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e2       	ldi	r20, 0x20	; 32
     c04:	51 e4       	ldi	r21, 0x41	; 65
     c06:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	8e 01       	movw	r16, r28
     c10:	09 59       	subi	r16, 0x99	; 153
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	f8 01       	movw	r30, r16
     c22:	91 83       	std	Z+1, r25	; 0x01
     c24:	80 83       	st	Z, r24
     c26:	1f c0       	rjmp	.+62     	; 0xc66 <main+0x40a>
     c28:	fe 01       	movw	r30, r28
     c2a:	eb 59       	subi	r30, 0x9B	; 155
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	80 e7       	ldi	r24, 0x70	; 112
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	80 83       	st	Z, r24
     c36:	fe 01       	movw	r30, r28
     c38:	eb 59       	subi	r30, 0x9B	; 155
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <main+0x3e4>
     c44:	fe 01       	movw	r30, r28
     c46:	eb 59       	subi	r30, 0x9B	; 155
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4e:	de 01       	movw	r26, r28
     c50:	a9 59       	subi	r26, 0x99	; 153
     c52:	bf 4f       	sbci	r27, 0xFF	; 255
     c54:	fe 01       	movw	r30, r28
     c56:	e9 59       	subi	r30, 0x99	; 153
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	11 96       	adiw	r26, 0x01	; 1
     c62:	9c 93       	st	X, r25
     c64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	fe 01       	movw	r30, r28
     c68:	e9 59       	subi	r30, 0x99	; 153
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	d1 f6       	brne	.-76     	; 0xc28 <main+0x3cc>
     c74:	27 c0       	rjmp	.+78     	; 0xcc4 <main+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c76:	8e 01       	movw	r16, r28
     c78:	09 59       	subi	r16, 0x99	; 153
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	fe 01       	movw	r30, r28
     c7e:	e7 59       	subi	r30, 0x97	; 151
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	60 81       	ld	r22, Z
     c84:	71 81       	ldd	r23, Z+1	; 0x01
     c86:	82 81       	ldd	r24, Z+2	; 0x02
     c88:	93 81       	ldd	r25, Z+3	; 0x03
     c8a:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	f8 01       	movw	r30, r16
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	80 83       	st	Z, r24
     c98:	de 01       	movw	r26, r28
     c9a:	ad 59       	subi	r26, 0x9D	; 157
     c9c:	bf 4f       	sbci	r27, 0xFF	; 255
     c9e:	fe 01       	movw	r30, r28
     ca0:	e9 59       	subi	r30, 0x99	; 153
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	8d 93       	st	X+, r24
     caa:	9c 93       	st	X, r25
     cac:	fe 01       	movw	r30, r28
     cae:	ed 59       	subi	r30, 0x9D	; 157
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	80 81       	ld	r24, Z
     cb4:	91 81       	ldd	r25, Z+1	; 0x01
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <main+0x45a>
     cba:	fe 01       	movw	r30, r28
     cbc:	ed 59       	subi	r30, 0x9D	; 157
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
 _delay_ms(250);

 left();
     cc4:	0e 94 b2 01 	call	0x364	; 0x364 <left>
     cc8:	fe 01       	movw	r30, r28
     cca:	e1 5a       	subi	r30, 0xA1	; 161
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e8       	ldi	r25, 0x80	; 128
     cd2:	a9 e8       	ldi	r26, 0x89	; 137
     cd4:	b4 e4       	ldi	r27, 0x44	; 68
     cd6:	80 83       	st	Z, r24
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	a2 83       	std	Z+2, r26	; 0x02
     cdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cde:	8e 01       	movw	r16, r28
     ce0:	05 5a       	subi	r16, 0xA5	; 165
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	fe 01       	movw	r30, r28
     ce6:	e1 5a       	subi	r30, 0xA1	; 161
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	60 81       	ld	r22, Z
     cec:	71 81       	ldd	r23, Z+1	; 0x01
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	26 e6       	ldi	r18, 0x66	; 102
     cf4:	36 e6       	ldi	r19, 0x66	; 102
     cf6:	46 e6       	ldi	r20, 0x66	; 102
     cf8:	55 e4       	ldi	r21, 0x45	; 69
     cfa:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	f8 01       	movw	r30, r16
     d04:	80 83       	st	Z, r24
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	a2 83       	std	Z+2, r26	; 0x02
     d0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d0c:	fe 01       	movw	r30, r28
     d0e:	e5 5a       	subi	r30, 0xA5	; 165
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
     d26:	88 23       	and	r24, r24
     d28:	44 f4       	brge	.+16     	; 0xd3a <main+0x4de>
		__ticks = 1;
     d2a:	fe 01       	movw	r30, r28
     d2c:	e7 5a       	subi	r30, 0xA7	; 167
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
     d38:	64 c0       	rjmp	.+200    	; 0xe02 <main+0x5a6>
	else if (__tmp > 65535)
     d3a:	fe 01       	movw	r30, r28
     d3c:	e5 5a       	subi	r30, 0xA5	; 165
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	3f ef       	ldi	r19, 0xFF	; 255
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	57 e4       	ldi	r21, 0x47	; 71
     d50:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	0c f0       	brlt	.+2      	; 0xd5a <main+0x4fe>
     d58:	43 c0       	rjmp	.+134    	; 0xde0 <main+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5a:	fe 01       	movw	r30, r28
     d5c:	e1 5a       	subi	r30, 0xA1	; 161
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e2       	ldi	r20, 0x20	; 32
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	8e 01       	movw	r16, r28
     d7a:	07 5a       	subi	r16, 0xA7	; 167
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	f8 01       	movw	r30, r16
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	80 83       	st	Z, r24
     d90:	1f c0       	rjmp	.+62     	; 0xdd0 <main+0x574>
     d92:	fe 01       	movw	r30, r28
     d94:	e9 5a       	subi	r30, 0xA9	; 169
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	80 e7       	ldi	r24, 0x70	; 112
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
     da0:	fe 01       	movw	r30, r28
     da2:	e9 5a       	subi	r30, 0xA9	; 169
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <main+0x54e>
     dae:	fe 01       	movw	r30, r28
     db0:	e9 5a       	subi	r30, 0xA9	; 169
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db8:	de 01       	movw	r26, r28
     dba:	a7 5a       	subi	r26, 0xA7	; 167
     dbc:	bf 4f       	sbci	r27, 0xFF	; 255
     dbe:	fe 01       	movw	r30, r28
     dc0:	e7 5a       	subi	r30, 0xA7	; 167
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	11 96       	adiw	r26, 0x01	; 1
     dcc:	9c 93       	st	X, r25
     dce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd0:	fe 01       	movw	r30, r28
     dd2:	e7 5a       	subi	r30, 0xA7	; 167
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 81       	ld	r24, Z
     dd8:	91 81       	ldd	r25, Z+1	; 0x01
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	d1 f6       	brne	.-76     	; 0xd92 <main+0x536>
     dde:	27 c0       	rjmp	.+78     	; 0xe2e <main+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de0:	8e 01       	movw	r16, r28
     de2:	07 5a       	subi	r16, 0xA7	; 167
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	fe 01       	movw	r30, r28
     de8:	e5 5a       	subi	r30, 0xA5	; 165
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	60 81       	ld	r22, Z
     dee:	71 81       	ldd	r23, Z+1	; 0x01
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	f8 01       	movw	r30, r16
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	de 01       	movw	r26, r28
     e04:	ab 5a       	subi	r26, 0xAB	; 171
     e06:	bf 4f       	sbci	r27, 0xFF	; 255
     e08:	fe 01       	movw	r30, r28
     e0a:	e7 5a       	subi	r30, 0xA7	; 167
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	8d 93       	st	X+, r24
     e14:	9c 93       	st	X, r25
     e16:	fe 01       	movw	r30, r28
     e18:	eb 5a       	subi	r30, 0xAB	; 171
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <main+0x5c4>
     e24:	fe 01       	movw	r30, r28
     e26:	eb 5a       	subi	r30, 0xAB	; 171
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	91 83       	std	Z+1, r25	; 0x01
     e2c:	80 83       	st	Z, r24
 _delay_ms(1100);
 stop();
     e2e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>
     e32:	fe 01       	movw	r30, r28
     e34:	ef 5a       	subi	r30, 0xAF	; 175
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	aa e7       	ldi	r26, 0x7A	; 122
     e3e:	b3 e4       	ldi	r27, 0x43	; 67
     e40:	80 83       	st	Z, r24
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	a2 83       	std	Z+2, r26	; 0x02
     e46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e48:	8e 01       	movw	r16, r28
     e4a:	03 5b       	subi	r16, 0xB3	; 179
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	fe 01       	movw	r30, r28
     e50:	ef 5a       	subi	r30, 0xAF	; 175
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	26 e6       	ldi	r18, 0x66	; 102
     e5e:	36 e6       	ldi	r19, 0x66	; 102
     e60:	46 e6       	ldi	r20, 0x66	; 102
     e62:	55 e4       	ldi	r21, 0x45	; 69
     e64:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	f8 01       	movw	r30, r16
     e6e:	80 83       	st	Z, r24
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	a2 83       	std	Z+2, r26	; 0x02
     e74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e76:	fe 01       	movw	r30, r28
     e78:	e3 5b       	subi	r30, 0xB3	; 179
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	60 81       	ld	r22, Z
     e7e:	71 81       	ldd	r23, Z+1	; 0x01
     e80:	82 81       	ldd	r24, Z+2	; 0x02
     e82:	93 81       	ldd	r25, Z+3	; 0x03
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	44 f4       	brge	.+16     	; 0xea4 <main+0x648>
		__ticks = 1;
     e94:	fe 01       	movw	r30, r28
     e96:	e5 5b       	subi	r30, 0xB5	; 181
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	80 83       	st	Z, r24
     ea2:	64 c0       	rjmp	.+200    	; 0xf6c <main+0x710>
	else if (__tmp > 65535)
     ea4:	fe 01       	movw	r30, r28
     ea6:	e3 5b       	subi	r30, 0xB3	; 179
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	3f ef       	ldi	r19, 0xFF	; 255
     eb6:	4f e7       	ldi	r20, 0x7F	; 127
     eb8:	57 e4       	ldi	r21, 0x47	; 71
     eba:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
     ebe:	18 16       	cp	r1, r24
     ec0:	0c f0       	brlt	.+2      	; 0xec4 <main+0x668>
     ec2:	43 c0       	rjmp	.+134    	; 0xf4a <main+0x6ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec4:	fe 01       	movw	r30, r28
     ec6:	ef 5a       	subi	r30, 0xAF	; 175
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	8e 01       	movw	r16, r28
     ee4:	05 5b       	subi	r16, 0xB5	; 181
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	f8 01       	movw	r30, r16
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
     efa:	1f c0       	rjmp	.+62     	; 0xf3a <main+0x6de>
     efc:	fe 01       	movw	r30, r28
     efe:	e7 5b       	subi	r30, 0xB7	; 183
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	80 e7       	ldi	r24, 0x70	; 112
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
     f0a:	fe 01       	movw	r30, r28
     f0c:	e7 5b       	subi	r30, 0xB7	; 183
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <main+0x6b8>
     f18:	fe 01       	movw	r30, r28
     f1a:	e7 5b       	subi	r30, 0xB7	; 183
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f22:	de 01       	movw	r26, r28
     f24:	a5 5b       	subi	r26, 0xB5	; 181
     f26:	bf 4f       	sbci	r27, 0xFF	; 255
     f28:	fe 01       	movw	r30, r28
     f2a:	e5 5b       	subi	r30, 0xB5	; 181
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	11 96       	adiw	r26, 0x01	; 1
     f36:	9c 93       	st	X, r25
     f38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3a:	fe 01       	movw	r30, r28
     f3c:	e5 5b       	subi	r30, 0xB5	; 181
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	d1 f6       	brne	.-76     	; 0xefc <main+0x6a0>
     f48:	27 c0       	rjmp	.+78     	; 0xf98 <main+0x73c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4a:	8e 01       	movw	r16, r28
     f4c:	05 5b       	subi	r16, 0xB5	; 181
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	fe 01       	movw	r30, r28
     f52:	e3 5b       	subi	r30, 0xB3	; 179
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	60 81       	ld	r22, Z
     f58:	71 81       	ldd	r23, Z+1	; 0x01
     f5a:	82 81       	ldd	r24, Z+2	; 0x02
     f5c:	93 81       	ldd	r25, Z+3	; 0x03
     f5e:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	f8 01       	movw	r30, r16
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	80 83       	st	Z, r24
     f6c:	de 01       	movw	r26, r28
     f6e:	a9 5b       	subi	r26, 0xB9	; 185
     f70:	bf 4f       	sbci	r27, 0xFF	; 255
     f72:	fe 01       	movw	r30, r28
     f74:	e5 5b       	subi	r30, 0xB5	; 181
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	8d 93       	st	X+, r24
     f7e:	9c 93       	st	X, r25
     f80:	fe 01       	movw	r30, r28
     f82:	e9 5b       	subi	r30, 0xB9	; 185
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <main+0x72e>
     f8e:	fe 01       	movw	r30, r28
     f90:	e9 5b       	subi	r30, 0xB9	; 185
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
 _delay_ms(250);

 forward();
     f98:	0e 94 9e 01 	call	0x33c	; 0x33c <forward>
     f9c:	fe 01       	movw	r30, r28
     f9e:	ed 5b       	subi	r30, 0xBD	; 189
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e4       	ldi	r25, 0x40	; 64
     fa6:	ac e1       	ldi	r26, 0x1C	; 28
     fa8:	b5 e4       	ldi	r27, 0x45	; 69
     faa:	80 83       	st	Z, r24
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	a2 83       	std	Z+2, r26	; 0x02
     fb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb2:	8e 01       	movw	r16, r28
     fb4:	01 5c       	subi	r16, 0xC1	; 193
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	fe 01       	movw	r30, r28
     fba:	ed 5b       	subi	r30, 0xBD	; 189
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	26 e6       	ldi	r18, 0x66	; 102
     fc8:	36 e6       	ldi	r19, 0x66	; 102
     fca:	46 e6       	ldi	r20, 0x66	; 102
     fcc:	55 e4       	ldi	r21, 0x45	; 69
     fce:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	f8 01       	movw	r30, r16
     fd8:	80 83       	st	Z, r24
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	a2 83       	std	Z+2, r26	; 0x02
     fde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fe0:	fe 01       	movw	r30, r28
     fe2:	ff 96       	adiw	r30, 0x3f	; 63
     fe4:	60 81       	ld	r22, Z
     fe6:	71 81       	ldd	r23, Z+1	; 0x01
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <main+0x7aa>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9e af       	std	Y+62, r25	; 0x3e
    1002:	8d af       	std	Y+61, r24	; 0x3d
    1004:	46 c0       	rjmp	.+140    	; 0x1092 <main+0x836>
	else if (__tmp > 65535)
    1006:	fe 01       	movw	r30, r28
    1008:	ff 96       	adiw	r30, 0x3f	; 63
    100a:	60 81       	ld	r22, Z
    100c:	71 81       	ldd	r23, Z+1	; 0x01
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	93 81       	ldd	r25, Z+3	; 0x03
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	3f ef       	ldi	r19, 0xFF	; 255
    1016:	4f e7       	ldi	r20, 0x7F	; 127
    1018:	57 e4       	ldi	r21, 0x47	; 71
    101a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
    101e:	18 16       	cp	r1, r24
    1020:	64 f5       	brge	.+88     	; 0x107a <main+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1022:	fe 01       	movw	r30, r28
    1024:	ed 5b       	subi	r30, 0xBD	; 189
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e2       	ldi	r20, 0x20	; 32
    1036:	51 e4       	ldi	r21, 0x41	; 65
    1038:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	9e af       	std	Y+62, r25	; 0x3e
    104e:	8d af       	std	Y+61, r24	; 0x3d
    1050:	0f c0       	rjmp	.+30     	; 0x1070 <main+0x814>
    1052:	80 e7       	ldi	r24, 0x70	; 112
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	9c af       	std	Y+60, r25	; 0x3c
    1058:	8b af       	std	Y+59, r24	; 0x3b
    105a:	8b ad       	ldd	r24, Y+59	; 0x3b
    105c:	9c ad       	ldd	r25, Y+60	; 0x3c
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <main+0x802>
    1062:	9c af       	std	Y+60, r25	; 0x3c
    1064:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1066:	8d ad       	ldd	r24, Y+61	; 0x3d
    1068:	9e ad       	ldd	r25, Y+62	; 0x3e
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	9e af       	std	Y+62, r25	; 0x3e
    106e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1070:	8d ad       	ldd	r24, Y+61	; 0x3d
    1072:	9e ad       	ldd	r25, Y+62	; 0x3e
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	69 f7       	brne	.-38     	; 0x1052 <main+0x7f6>
    1078:	16 c0       	rjmp	.+44     	; 0x10a6 <main+0x84a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107a:	fe 01       	movw	r30, r28
    107c:	ff 96       	adiw	r30, 0x3f	; 63
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	9e af       	std	Y+62, r25	; 0x3e
    1090:	8d af       	std	Y+61, r24	; 0x3d
    1092:	8d ad       	ldd	r24, Y+61	; 0x3d
    1094:	9e ad       	ldd	r25, Y+62	; 0x3e
    1096:	9a af       	std	Y+58, r25	; 0x3a
    1098:	89 af       	std	Y+57, r24	; 0x39
    109a:	89 ad       	ldd	r24, Y+57	; 0x39
    109c:	9a ad       	ldd	r25, Y+58	; 0x3a
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <main+0x842>
    10a2:	9a af       	std	Y+58, r25	; 0x3a
    10a4:	89 af       	std	Y+57, r24	; 0x39
 _delay_ms(2500);
 stop();
    10a6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>

 object_ungrip();
    10aa:	0e 94 1e 03 	call	0x63c	; 0x63c <object_ungrip>

 back();
    10ae:	0e 94 a8 01 	call	0x350	; 0x350 <back>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	aa ef       	ldi	r26, 0xFA	; 250
    10b8:	b3 e4       	ldi	r27, 0x43	; 67
    10ba:	8d ab       	std	Y+53, r24	; 0x35
    10bc:	9e ab       	std	Y+54, r25	; 0x36
    10be:	af ab       	std	Y+55, r26	; 0x37
    10c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c2:	6d a9       	ldd	r22, Y+53	; 0x35
    10c4:	7e a9       	ldd	r23, Y+54	; 0x36
    10c6:	8f a9       	ldd	r24, Y+55	; 0x37
    10c8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ca:	26 e6       	ldi	r18, 0x66	; 102
    10cc:	36 e6       	ldi	r19, 0x66	; 102
    10ce:	46 e6       	ldi	r20, 0x66	; 102
    10d0:	55 e4       	ldi	r21, 0x45	; 69
    10d2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	89 ab       	std	Y+49, r24	; 0x31
    10dc:	9a ab       	std	Y+50, r25	; 0x32
    10de:	ab ab       	std	Y+51, r26	; 0x33
    10e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10e2:	69 a9       	ldd	r22, Y+49	; 0x31
    10e4:	7a a9       	ldd	r23, Y+50	; 0x32
    10e6:	8b a9       	ldd	r24, Y+51	; 0x33
    10e8:	9c a9       	ldd	r25, Y+52	; 0x34
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e8       	ldi	r20, 0x80	; 128
    10f0:	5f e3       	ldi	r21, 0x3F	; 63
    10f2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
    10f6:	88 23       	and	r24, r24
    10f8:	2c f4       	brge	.+10     	; 0x1104 <main+0x8a8>
		__ticks = 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	98 ab       	std	Y+48, r25	; 0x30
    1100:	8f a7       	std	Y+47, r24	; 0x2f
    1102:	3f c0       	rjmp	.+126    	; 0x1182 <main+0x926>
	else if (__tmp > 65535)
    1104:	69 a9       	ldd	r22, Y+49	; 0x31
    1106:	7a a9       	ldd	r23, Y+50	; 0x32
    1108:	8b a9       	ldd	r24, Y+51	; 0x33
    110a:	9c a9       	ldd	r25, Y+52	; 0x34
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	3f ef       	ldi	r19, 0xFF	; 255
    1110:	4f e7       	ldi	r20, 0x7F	; 127
    1112:	57 e4       	ldi	r21, 0x47	; 71
    1114:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
    1118:	18 16       	cp	r1, r24
    111a:	4c f5       	brge	.+82     	; 0x116e <main+0x912>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111c:	6d a9       	ldd	r22, Y+53	; 0x35
    111e:	7e a9       	ldd	r23, Y+54	; 0x36
    1120:	8f a9       	ldd	r24, Y+55	; 0x37
    1122:	98 ad       	ldd	r25, Y+56	; 0x38
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e2       	ldi	r20, 0x20	; 32
    112a:	51 e4       	ldi	r21, 0x41	; 65
    112c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	98 ab       	std	Y+48, r25	; 0x30
    1142:	8f a7       	std	Y+47, r24	; 0x2f
    1144:	0f c0       	rjmp	.+30     	; 0x1164 <main+0x908>
    1146:	80 e7       	ldi	r24, 0x70	; 112
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	9e a7       	std	Y+46, r25	; 0x2e
    114c:	8d a7       	std	Y+45, r24	; 0x2d
    114e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1150:	9e a5       	ldd	r25, Y+46	; 0x2e
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <main+0x8f6>
    1156:	9e a7       	std	Y+46, r25	; 0x2e
    1158:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115a:	8f a5       	ldd	r24, Y+47	; 0x2f
    115c:	98 a9       	ldd	r25, Y+48	; 0x30
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	98 ab       	std	Y+48, r25	; 0x30
    1162:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1164:	8f a5       	ldd	r24, Y+47	; 0x2f
    1166:	98 a9       	ldd	r25, Y+48	; 0x30
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	69 f7       	brne	.-38     	; 0x1146 <main+0x8ea>
    116c:	14 c0       	rjmp	.+40     	; 0x1196 <main+0x93a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116e:	69 a9       	ldd	r22, Y+49	; 0x31
    1170:	7a a9       	ldd	r23, Y+50	; 0x32
    1172:	8b a9       	ldd	r24, Y+51	; 0x33
    1174:	9c a9       	ldd	r25, Y+52	; 0x34
    1176:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	98 ab       	std	Y+48, r25	; 0x30
    1180:	8f a7       	std	Y+47, r24	; 0x2f
    1182:	8f a5       	ldd	r24, Y+47	; 0x2f
    1184:	98 a9       	ldd	r25, Y+48	; 0x30
    1186:	9c a7       	std	Y+44, r25	; 0x2c
    1188:	8b a7       	std	Y+43, r24	; 0x2b
    118a:	8b a5       	ldd	r24, Y+43	; 0x2b
    118c:	9c a5       	ldd	r25, Y+44	; 0x2c
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <main+0x932>
    1192:	9c a7       	std	Y+44, r25	; 0x2c
    1194:	8b a7       	std	Y+43, r24	; 0x2b
 _delay_ms(500);
 stop();
    1196:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	aa e7       	ldi	r26, 0x7A	; 122
    11a0:	b3 e4       	ldi	r27, 0x43	; 67
    11a2:	8f a3       	std	Y+39, r24	; 0x27
    11a4:	98 a7       	std	Y+40, r25	; 0x28
    11a6:	a9 a7       	std	Y+41, r26	; 0x29
    11a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11aa:	6f a1       	ldd	r22, Y+39	; 0x27
    11ac:	78 a5       	ldd	r23, Y+40	; 0x28
    11ae:	89 a5       	ldd	r24, Y+41	; 0x29
    11b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b2:	26 e6       	ldi	r18, 0x66	; 102
    11b4:	36 e6       	ldi	r19, 0x66	; 102
    11b6:	46 e6       	ldi	r20, 0x66	; 102
    11b8:	55 e4       	ldi	r21, 0x45	; 69
    11ba:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	8b a3       	std	Y+35, r24	; 0x23
    11c4:	9c a3       	std	Y+36, r25	; 0x24
    11c6:	ad a3       	std	Y+37, r26	; 0x25
    11c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11ca:	6b a1       	ldd	r22, Y+35	; 0x23
    11cc:	7c a1       	ldd	r23, Y+36	; 0x24
    11ce:	8d a1       	ldd	r24, Y+37	; 0x25
    11d0:	9e a1       	ldd	r25, Y+38	; 0x26
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e8       	ldi	r20, 0x80	; 128
    11d8:	5f e3       	ldi	r21, 0x3F	; 63
    11da:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
    11de:	88 23       	and	r24, r24
    11e0:	2c f4       	brge	.+10     	; 0x11ec <main+0x990>
		__ticks = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	9a a3       	std	Y+34, r25	; 0x22
    11e8:	89 a3       	std	Y+33, r24	; 0x21
    11ea:	3f c0       	rjmp	.+126    	; 0x126a <main+0xa0e>
	else if (__tmp > 65535)
    11ec:	6b a1       	ldd	r22, Y+35	; 0x23
    11ee:	7c a1       	ldd	r23, Y+36	; 0x24
    11f0:	8d a1       	ldd	r24, Y+37	; 0x25
    11f2:	9e a1       	ldd	r25, Y+38	; 0x26
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	4f e7       	ldi	r20, 0x7F	; 127
    11fa:	57 e4       	ldi	r21, 0x47	; 71
    11fc:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
    1200:	18 16       	cp	r1, r24
    1202:	4c f5       	brge	.+82     	; 0x1256 <main+0x9fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1204:	6f a1       	ldd	r22, Y+39	; 0x27
    1206:	78 a5       	ldd	r23, Y+40	; 0x28
    1208:	89 a5       	ldd	r24, Y+41	; 0x29
    120a:	9a a5       	ldd	r25, Y+42	; 0x2a
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e2       	ldi	r20, 0x20	; 32
    1212:	51 e4       	ldi	r21, 0x41	; 65
    1214:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9a a3       	std	Y+34, r25	; 0x22
    122a:	89 a3       	std	Y+33, r24	; 0x21
    122c:	0f c0       	rjmp	.+30     	; 0x124c <main+0x9f0>
    122e:	80 e7       	ldi	r24, 0x70	; 112
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	98 a3       	std	Y+32, r25	; 0x20
    1234:	8f 8f       	std	Y+31, r24	; 0x1f
    1236:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1238:	98 a1       	ldd	r25, Y+32	; 0x20
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <main+0x9de>
    123e:	98 a3       	std	Y+32, r25	; 0x20
    1240:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1242:	89 a1       	ldd	r24, Y+33	; 0x21
    1244:	9a a1       	ldd	r25, Y+34	; 0x22
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	9a a3       	std	Y+34, r25	; 0x22
    124a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124c:	89 a1       	ldd	r24, Y+33	; 0x21
    124e:	9a a1       	ldd	r25, Y+34	; 0x22
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	69 f7       	brne	.-38     	; 0x122e <main+0x9d2>
    1254:	14 c0       	rjmp	.+40     	; 0x127e <main+0xa22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1256:	6b a1       	ldd	r22, Y+35	; 0x23
    1258:	7c a1       	ldd	r23, Y+36	; 0x24
    125a:	8d a1       	ldd	r24, Y+37	; 0x25
    125c:	9e a1       	ldd	r25, Y+38	; 0x26
    125e:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9a a3       	std	Y+34, r25	; 0x22
    1268:	89 a3       	std	Y+33, r24	; 0x21
    126a:	89 a1       	ldd	r24, Y+33	; 0x21
    126c:	9a a1       	ldd	r25, Y+34	; 0x22
    126e:	9e 8f       	std	Y+30, r25	; 0x1e
    1270:	8d 8f       	std	Y+29, r24	; 0x1d
    1272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1274:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <main+0xa1a>
    127a:	9e 8f       	std	Y+30, r25	; 0x1e
    127c:	8d 8f       	std	Y+29, r24	; 0x1d
 _delay_ms(250);

 right();
    127e:	0e 94 bc 01 	call	0x378	; 0x378 <right>
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e8       	ldi	r25, 0x80	; 128
    1286:	a9 e8       	ldi	r26, 0x89	; 137
    1288:	b4 e4       	ldi	r27, 0x44	; 68
    128a:	89 8f       	std	Y+25, r24	; 0x19
    128c:	9a 8f       	std	Y+26, r25	; 0x1a
    128e:	ab 8f       	std	Y+27, r26	; 0x1b
    1290:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1292:	69 8d       	ldd	r22, Y+25	; 0x19
    1294:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129a:	26 e6       	ldi	r18, 0x66	; 102
    129c:	36 e6       	ldi	r19, 0x66	; 102
    129e:	46 e6       	ldi	r20, 0x66	; 102
    12a0:	55 e4       	ldi	r21, 0x45	; 69
    12a2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	8d 8b       	std	Y+21, r24	; 0x15
    12ac:	9e 8b       	std	Y+22, r25	; 0x16
    12ae:	af 8b       	std	Y+23, r26	; 0x17
    12b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12b2:	6d 89       	ldd	r22, Y+21	; 0x15
    12b4:	7e 89       	ldd	r23, Y+22	; 0x16
    12b6:	8f 89       	ldd	r24, Y+23	; 0x17
    12b8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e8       	ldi	r20, 0x80	; 128
    12c0:	5f e3       	ldi	r21, 0x3F	; 63
    12c2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
    12c6:	88 23       	and	r24, r24
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <main+0xa78>
		__ticks = 1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9c 8b       	std	Y+20, r25	; 0x14
    12d0:	8b 8b       	std	Y+19, r24	; 0x13
    12d2:	3f c0       	rjmp	.+126    	; 0x1352 <main+0xaf6>
	else if (__tmp > 65535)
    12d4:	6d 89       	ldd	r22, Y+21	; 0x15
    12d6:	7e 89       	ldd	r23, Y+22	; 0x16
    12d8:	8f 89       	ldd	r24, Y+23	; 0x17
    12da:	98 8d       	ldd	r25, Y+24	; 0x18
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	3f ef       	ldi	r19, 0xFF	; 255
    12e0:	4f e7       	ldi	r20, 0x7F	; 127
    12e2:	57 e4       	ldi	r21, 0x47	; 71
    12e4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
    12e8:	18 16       	cp	r1, r24
    12ea:	4c f5       	brge	.+82     	; 0x133e <main+0xae2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ec:	69 8d       	ldd	r22, Y+25	; 0x19
    12ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e2       	ldi	r20, 0x20	; 32
    12fa:	51 e4       	ldi	r21, 0x41	; 65
    12fc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	bc 01       	movw	r22, r24
    1306:	cd 01       	movw	r24, r26
    1308:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9c 8b       	std	Y+20, r25	; 0x14
    1312:	8b 8b       	std	Y+19, r24	; 0x13
    1314:	0f c0       	rjmp	.+30     	; 0x1334 <main+0xad8>
    1316:	80 e7       	ldi	r24, 0x70	; 112
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	9a 8b       	std	Y+18, r25	; 0x12
    131c:	89 8b       	std	Y+17, r24	; 0x11
    131e:	89 89       	ldd	r24, Y+17	; 0x11
    1320:	9a 89       	ldd	r25, Y+18	; 0x12
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <main+0xac6>
    1326:	9a 8b       	std	Y+18, r25	; 0x12
    1328:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132a:	8b 89       	ldd	r24, Y+19	; 0x13
    132c:	9c 89       	ldd	r25, Y+20	; 0x14
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	9c 8b       	std	Y+20, r25	; 0x14
    1332:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1334:	8b 89       	ldd	r24, Y+19	; 0x13
    1336:	9c 89       	ldd	r25, Y+20	; 0x14
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	69 f7       	brne	.-38     	; 0x1316 <main+0xaba>
    133c:	14 c0       	rjmp	.+40     	; 0x1366 <main+0xb0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133e:	6d 89       	ldd	r22, Y+21	; 0x15
    1340:	7e 89       	ldd	r23, Y+22	; 0x16
    1342:	8f 89       	ldd	r24, Y+23	; 0x17
    1344:	98 8d       	ldd	r25, Y+24	; 0x18
    1346:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9c 8b       	std	Y+20, r25	; 0x14
    1350:	8b 8b       	std	Y+19, r24	; 0x13
    1352:	8b 89       	ldd	r24, Y+19	; 0x13
    1354:	9c 89       	ldd	r25, Y+20	; 0x14
    1356:	98 8b       	std	Y+16, r25	; 0x10
    1358:	8f 87       	std	Y+15, r24	; 0x0f
    135a:	8f 85       	ldd	r24, Y+15	; 0x0f
    135c:	98 89       	ldd	r25, Y+16	; 0x10
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <main+0xb02>
    1362:	98 8b       	std	Y+16, r25	; 0x10
    1364:	8f 87       	std	Y+15, r24	; 0x0f
 _delay_ms(1100);
 stop();
    1366:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	aa e7       	ldi	r26, 0x7A	; 122
    1370:	b3 e4       	ldi	r27, 0x43	; 67
    1372:	8b 87       	std	Y+11, r24	; 0x0b
    1374:	9c 87       	std	Y+12, r25	; 0x0c
    1376:	ad 87       	std	Y+13, r26	; 0x0d
    1378:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137a:	6b 85       	ldd	r22, Y+11	; 0x0b
    137c:	7c 85       	ldd	r23, Y+12	; 0x0c
    137e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1380:	9e 85       	ldd	r25, Y+14	; 0x0e
    1382:	26 e6       	ldi	r18, 0x66	; 102
    1384:	36 e6       	ldi	r19, 0x66	; 102
    1386:	46 e6       	ldi	r20, 0x66	; 102
    1388:	55 e4       	ldi	r21, 0x45	; 69
    138a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	8f 83       	std	Y+7, r24	; 0x07
    1394:	98 87       	std	Y+8, r25	; 0x08
    1396:	a9 87       	std	Y+9, r26	; 0x09
    1398:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    139a:	6f 81       	ldd	r22, Y+7	; 0x07
    139c:	78 85       	ldd	r23, Y+8	; 0x08
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e8       	ldi	r20, 0x80	; 128
    13a8:	5f e3       	ldi	r21, 0x3F	; 63
    13aa:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__ltsf2>
    13ae:	88 23       	and	r24, r24
    13b0:	2c f4       	brge	.+10     	; 0x13bc <main+0xb60>
		__ticks = 1;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	9e 83       	std	Y+6, r25	; 0x06
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	3f c0       	rjmp	.+126    	; 0x143a <main+0xbde>
	else if (__tmp > 65535)
    13bc:	6f 81       	ldd	r22, Y+7	; 0x07
    13be:	78 85       	ldd	r23, Y+8	; 0x08
    13c0:	89 85       	ldd	r24, Y+9	; 0x09
    13c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	3f ef       	ldi	r19, 0xFF	; 255
    13c8:	4f e7       	ldi	r20, 0x7F	; 127
    13ca:	57 e4       	ldi	r21, 0x47	; 71
    13cc:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__gtsf2>
    13d0:	18 16       	cp	r1, r24
    13d2:	4c f5       	brge	.+82     	; 0x1426 <main+0xbca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13da:	9e 85       	ldd	r25, Y+14	; 0x0e
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e2       	ldi	r20, 0x20	; 32
    13e2:	51 e4       	ldi	r21, 0x41	; 65
    13e4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 83       	std	Y+5, r24	; 0x05
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <main+0xbc0>
    13fe:	80 e7       	ldi	r24, 0x70	; 112
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	8b 83       	std	Y+3, r24	; 0x03
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	f1 f7       	brne	.-4      	; 0x140a <main+0xbae>
    140e:	9c 83       	std	Y+4, r25	; 0x04
    1410:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	9e 83       	std	Y+6, r25	; 0x06
    141a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	69 f7       	brne	.-38     	; 0x13fe <main+0xba2>
    1424:	2a ca       	rjmp	.-2988   	; 0x87a <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1426:	6f 81       	ldd	r22, Y+7	; 0x07
    1428:	78 85       	ldd	r23, Y+8	; 0x08
    142a:	89 85       	ldd	r24, Y+9	; 0x09
    142c:	9a 85       	ldd	r25, Y+10	; 0x0a
    142e:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	9e 83       	std	Y+6, r25	; 0x06
    1438:	8d 83       	std	Y+5, r24	; 0x05
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <main+0xbea>
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	15 ca       	rjmp	.-3030   	; 0x87a <main+0x1e>

00001450 <__fixunssfsi>:
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	5f e4       	ldi	r21, 0x4F	; 79
    1464:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__gesf2>
    1468:	88 23       	and	r24, r24
    146a:	8c f0       	brlt	.+34     	; 0x148e <__fixunssfsi+0x3e>
    146c:	c8 01       	movw	r24, r16
    146e:	b7 01       	movw	r22, r14
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	5f e4       	ldi	r21, 0x4F	; 79
    1478:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__subsf3>
    147c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__fixsfsi>
    1480:	9b 01       	movw	r18, r22
    1482:	ac 01       	movw	r20, r24
    1484:	20 50       	subi	r18, 0x00	; 0
    1486:	30 40       	sbci	r19, 0x00	; 0
    1488:	40 40       	sbci	r20, 0x00	; 0
    148a:	50 48       	sbci	r21, 0x80	; 128
    148c:	06 c0       	rjmp	.+12     	; 0x149a <__fixunssfsi+0x4a>
    148e:	c8 01       	movw	r24, r16
    1490:	b7 01       	movw	r22, r14
    1492:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__fixsfsi>
    1496:	9b 01       	movw	r18, r22
    1498:	ac 01       	movw	r20, r24
    149a:	b9 01       	movw	r22, r18
    149c:	ca 01       	movw	r24, r20
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	08 95       	ret

000014a8 <_fpadd_parts>:
    14a8:	a0 e0       	ldi	r26, 0x00	; 0
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ea e5       	ldi	r30, 0x5A	; 90
    14ae:	fa e0       	ldi	r31, 0x0A	; 10
    14b0:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__prologue_saves__>
    14b4:	dc 01       	movw	r26, r24
    14b6:	2b 01       	movw	r4, r22
    14b8:	fa 01       	movw	r30, r20
    14ba:	9c 91       	ld	r25, X
    14bc:	92 30       	cpi	r25, 0x02	; 2
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <_fpadd_parts+0x1a>
    14c0:	39 c1       	rjmp	.+626    	; 0x1734 <_fpadd_parts+0x28c>
    14c2:	eb 01       	movw	r28, r22
    14c4:	88 81       	ld	r24, Y
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	08 f4       	brcc	.+2      	; 0x14cc <_fpadd_parts+0x24>
    14ca:	33 c1       	rjmp	.+614    	; 0x1732 <_fpadd_parts+0x28a>
    14cc:	94 30       	cpi	r25, 0x04	; 4
    14ce:	69 f4       	brne	.+26     	; 0x14ea <_fpadd_parts+0x42>
    14d0:	84 30       	cpi	r24, 0x04	; 4
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <_fpadd_parts+0x2e>
    14d4:	2f c1       	rjmp	.+606    	; 0x1734 <_fpadd_parts+0x28c>
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	9c 91       	ld	r25, X
    14da:	11 97       	sbiw	r26, 0x01	; 1
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	98 17       	cp	r25, r24
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <_fpadd_parts+0x3c>
    14e2:	28 c1       	rjmp	.+592    	; 0x1734 <_fpadd_parts+0x28c>
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b2 e0       	ldi	r27, 0x02	; 2
    14e8:	25 c1       	rjmp	.+586    	; 0x1734 <_fpadd_parts+0x28c>
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <_fpadd_parts+0x48>
    14ee:	21 c1       	rjmp	.+578    	; 0x1732 <_fpadd_parts+0x28a>
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	a9 f4       	brne	.+42     	; 0x151e <_fpadd_parts+0x76>
    14f4:	92 30       	cpi	r25, 0x02	; 2
    14f6:	09 f0       	breq	.+2      	; 0x14fa <_fpadd_parts+0x52>
    14f8:	1d c1       	rjmp	.+570    	; 0x1734 <_fpadd_parts+0x28c>
    14fa:	9a 01       	movw	r18, r20
    14fc:	ad 01       	movw	r20, r26
    14fe:	88 e0       	ldi	r24, 0x08	; 8
    1500:	ea 01       	movw	r28, r20
    1502:	09 90       	ld	r0, Y+
    1504:	ae 01       	movw	r20, r28
    1506:	e9 01       	movw	r28, r18
    1508:	09 92       	st	Y+, r0
    150a:	9e 01       	movw	r18, r28
    150c:	81 50       	subi	r24, 0x01	; 1
    150e:	c1 f7       	brne	.-16     	; 0x1500 <_fpadd_parts+0x58>
    1510:	e2 01       	movw	r28, r4
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	11 96       	adiw	r26, 0x01	; 1
    1516:	9c 91       	ld	r25, X
    1518:	89 23       	and	r24, r25
    151a:	81 83       	std	Z+1, r24	; 0x01
    151c:	08 c1       	rjmp	.+528    	; 0x172e <_fpadd_parts+0x286>
    151e:	92 30       	cpi	r25, 0x02	; 2
    1520:	09 f4       	brne	.+2      	; 0x1524 <_fpadd_parts+0x7c>
    1522:	07 c1       	rjmp	.+526    	; 0x1732 <_fpadd_parts+0x28a>
    1524:	12 96       	adiw	r26, 0x02	; 2
    1526:	2d 90       	ld	r2, X+
    1528:	3c 90       	ld	r3, X
    152a:	13 97       	sbiw	r26, 0x03	; 3
    152c:	eb 01       	movw	r28, r22
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	14 96       	adiw	r26, 0x04	; 4
    1534:	ad 90       	ld	r10, X+
    1536:	bd 90       	ld	r11, X+
    1538:	cd 90       	ld	r12, X+
    153a:	dc 90       	ld	r13, X
    153c:	17 97       	sbiw	r26, 0x07	; 7
    153e:	ec 80       	ldd	r14, Y+4	; 0x04
    1540:	fd 80       	ldd	r15, Y+5	; 0x05
    1542:	0e 81       	ldd	r16, Y+6	; 0x06
    1544:	1f 81       	ldd	r17, Y+7	; 0x07
    1546:	91 01       	movw	r18, r2
    1548:	28 1b       	sub	r18, r24
    154a:	39 0b       	sbc	r19, r25
    154c:	b9 01       	movw	r22, r18
    154e:	37 ff       	sbrs	r19, 7
    1550:	04 c0       	rjmp	.+8      	; 0x155a <_fpadd_parts+0xb2>
    1552:	66 27       	eor	r22, r22
    1554:	77 27       	eor	r23, r23
    1556:	62 1b       	sub	r22, r18
    1558:	73 0b       	sbc	r23, r19
    155a:	60 32       	cpi	r22, 0x20	; 32
    155c:	71 05       	cpc	r23, r1
    155e:	0c f0       	brlt	.+2      	; 0x1562 <_fpadd_parts+0xba>
    1560:	61 c0       	rjmp	.+194    	; 0x1624 <_fpadd_parts+0x17c>
    1562:	12 16       	cp	r1, r18
    1564:	13 06       	cpc	r1, r19
    1566:	6c f5       	brge	.+90     	; 0x15c2 <_fpadd_parts+0x11a>
    1568:	37 01       	movw	r6, r14
    156a:	48 01       	movw	r8, r16
    156c:	06 2e       	mov	r0, r22
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <_fpadd_parts+0xd0>
    1570:	96 94       	lsr	r9
    1572:	87 94       	ror	r8
    1574:	77 94       	ror	r7
    1576:	67 94       	ror	r6
    1578:	0a 94       	dec	r0
    157a:	d2 f7       	brpl	.-12     	; 0x1570 <_fpadd_parts+0xc8>
    157c:	21 e0       	ldi	r18, 0x01	; 1
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	04 c0       	rjmp	.+8      	; 0x158e <_fpadd_parts+0xe6>
    1586:	22 0f       	add	r18, r18
    1588:	33 1f       	adc	r19, r19
    158a:	44 1f       	adc	r20, r20
    158c:	55 1f       	adc	r21, r21
    158e:	6a 95       	dec	r22
    1590:	d2 f7       	brpl	.-12     	; 0x1586 <_fpadd_parts+0xde>
    1592:	21 50       	subi	r18, 0x01	; 1
    1594:	30 40       	sbci	r19, 0x00	; 0
    1596:	40 40       	sbci	r20, 0x00	; 0
    1598:	50 40       	sbci	r21, 0x00	; 0
    159a:	2e 21       	and	r18, r14
    159c:	3f 21       	and	r19, r15
    159e:	40 23       	and	r20, r16
    15a0:	51 23       	and	r21, r17
    15a2:	21 15       	cp	r18, r1
    15a4:	31 05       	cpc	r19, r1
    15a6:	41 05       	cpc	r20, r1
    15a8:	51 05       	cpc	r21, r1
    15aa:	21 f0       	breq	.+8      	; 0x15b4 <_fpadd_parts+0x10c>
    15ac:	21 e0       	ldi	r18, 0x01	; 1
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	79 01       	movw	r14, r18
    15b6:	8a 01       	movw	r16, r20
    15b8:	e6 28       	or	r14, r6
    15ba:	f7 28       	or	r15, r7
    15bc:	08 29       	or	r16, r8
    15be:	19 29       	or	r17, r9
    15c0:	3c c0       	rjmp	.+120    	; 0x163a <_fpadd_parts+0x192>
    15c2:	23 2b       	or	r18, r19
    15c4:	d1 f1       	breq	.+116    	; 0x163a <_fpadd_parts+0x192>
    15c6:	26 0e       	add	r2, r22
    15c8:	37 1e       	adc	r3, r23
    15ca:	35 01       	movw	r6, r10
    15cc:	46 01       	movw	r8, r12
    15ce:	06 2e       	mov	r0, r22
    15d0:	04 c0       	rjmp	.+8      	; 0x15da <_fpadd_parts+0x132>
    15d2:	96 94       	lsr	r9
    15d4:	87 94       	ror	r8
    15d6:	77 94       	ror	r7
    15d8:	67 94       	ror	r6
    15da:	0a 94       	dec	r0
    15dc:	d2 f7       	brpl	.-12     	; 0x15d2 <_fpadd_parts+0x12a>
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <_fpadd_parts+0x148>
    15e8:	22 0f       	add	r18, r18
    15ea:	33 1f       	adc	r19, r19
    15ec:	44 1f       	adc	r20, r20
    15ee:	55 1f       	adc	r21, r21
    15f0:	6a 95       	dec	r22
    15f2:	d2 f7       	brpl	.-12     	; 0x15e8 <_fpadd_parts+0x140>
    15f4:	21 50       	subi	r18, 0x01	; 1
    15f6:	30 40       	sbci	r19, 0x00	; 0
    15f8:	40 40       	sbci	r20, 0x00	; 0
    15fa:	50 40       	sbci	r21, 0x00	; 0
    15fc:	2a 21       	and	r18, r10
    15fe:	3b 21       	and	r19, r11
    1600:	4c 21       	and	r20, r12
    1602:	5d 21       	and	r21, r13
    1604:	21 15       	cp	r18, r1
    1606:	31 05       	cpc	r19, r1
    1608:	41 05       	cpc	r20, r1
    160a:	51 05       	cpc	r21, r1
    160c:	21 f0       	breq	.+8      	; 0x1616 <_fpadd_parts+0x16e>
    160e:	21 e0       	ldi	r18, 0x01	; 1
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	59 01       	movw	r10, r18
    1618:	6a 01       	movw	r12, r20
    161a:	a6 28       	or	r10, r6
    161c:	b7 28       	or	r11, r7
    161e:	c8 28       	or	r12, r8
    1620:	d9 28       	or	r13, r9
    1622:	0b c0       	rjmp	.+22     	; 0x163a <_fpadd_parts+0x192>
    1624:	82 15       	cp	r24, r2
    1626:	93 05       	cpc	r25, r3
    1628:	2c f0       	brlt	.+10     	; 0x1634 <_fpadd_parts+0x18c>
    162a:	1c 01       	movw	r2, r24
    162c:	aa 24       	eor	r10, r10
    162e:	bb 24       	eor	r11, r11
    1630:	65 01       	movw	r12, r10
    1632:	03 c0       	rjmp	.+6      	; 0x163a <_fpadd_parts+0x192>
    1634:	ee 24       	eor	r14, r14
    1636:	ff 24       	eor	r15, r15
    1638:	87 01       	movw	r16, r14
    163a:	11 96       	adiw	r26, 0x01	; 1
    163c:	9c 91       	ld	r25, X
    163e:	d2 01       	movw	r26, r4
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	8c 91       	ld	r24, X
    1644:	98 17       	cp	r25, r24
    1646:	09 f4       	brne	.+2      	; 0x164a <_fpadd_parts+0x1a2>
    1648:	45 c0       	rjmp	.+138    	; 0x16d4 <_fpadd_parts+0x22c>
    164a:	99 23       	and	r25, r25
    164c:	39 f0       	breq	.+14     	; 0x165c <_fpadd_parts+0x1b4>
    164e:	a8 01       	movw	r20, r16
    1650:	97 01       	movw	r18, r14
    1652:	2a 19       	sub	r18, r10
    1654:	3b 09       	sbc	r19, r11
    1656:	4c 09       	sbc	r20, r12
    1658:	5d 09       	sbc	r21, r13
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <_fpadd_parts+0x1c0>
    165c:	a6 01       	movw	r20, r12
    165e:	95 01       	movw	r18, r10
    1660:	2e 19       	sub	r18, r14
    1662:	3f 09       	sbc	r19, r15
    1664:	40 0b       	sbc	r20, r16
    1666:	51 0b       	sbc	r21, r17
    1668:	57 fd       	sbrc	r21, 7
    166a:	08 c0       	rjmp	.+16     	; 0x167c <_fpadd_parts+0x1d4>
    166c:	11 82       	std	Z+1, r1	; 0x01
    166e:	33 82       	std	Z+3, r3	; 0x03
    1670:	22 82       	std	Z+2, r2	; 0x02
    1672:	24 83       	std	Z+4, r18	; 0x04
    1674:	35 83       	std	Z+5, r19	; 0x05
    1676:	46 83       	std	Z+6, r20	; 0x06
    1678:	57 83       	std	Z+7, r21	; 0x07
    167a:	1d c0       	rjmp	.+58     	; 0x16b6 <_fpadd_parts+0x20e>
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	81 83       	std	Z+1, r24	; 0x01
    1680:	33 82       	std	Z+3, r3	; 0x03
    1682:	22 82       	std	Z+2, r2	; 0x02
    1684:	88 27       	eor	r24, r24
    1686:	99 27       	eor	r25, r25
    1688:	dc 01       	movw	r26, r24
    168a:	82 1b       	sub	r24, r18
    168c:	93 0b       	sbc	r25, r19
    168e:	a4 0b       	sbc	r26, r20
    1690:	b5 0b       	sbc	r27, r21
    1692:	84 83       	std	Z+4, r24	; 0x04
    1694:	95 83       	std	Z+5, r25	; 0x05
    1696:	a6 83       	std	Z+6, r26	; 0x06
    1698:	b7 83       	std	Z+7, r27	; 0x07
    169a:	0d c0       	rjmp	.+26     	; 0x16b6 <_fpadd_parts+0x20e>
    169c:	22 0f       	add	r18, r18
    169e:	33 1f       	adc	r19, r19
    16a0:	44 1f       	adc	r20, r20
    16a2:	55 1f       	adc	r21, r21
    16a4:	24 83       	std	Z+4, r18	; 0x04
    16a6:	35 83       	std	Z+5, r19	; 0x05
    16a8:	46 83       	std	Z+6, r20	; 0x06
    16aa:	57 83       	std	Z+7, r21	; 0x07
    16ac:	82 81       	ldd	r24, Z+2	; 0x02
    16ae:	93 81       	ldd	r25, Z+3	; 0x03
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	93 83       	std	Z+3, r25	; 0x03
    16b4:	82 83       	std	Z+2, r24	; 0x02
    16b6:	24 81       	ldd	r18, Z+4	; 0x04
    16b8:	35 81       	ldd	r19, Z+5	; 0x05
    16ba:	46 81       	ldd	r20, Z+6	; 0x06
    16bc:	57 81       	ldd	r21, Z+7	; 0x07
    16be:	da 01       	movw	r26, r20
    16c0:	c9 01       	movw	r24, r18
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	a1 09       	sbc	r26, r1
    16c6:	b1 09       	sbc	r27, r1
    16c8:	8f 5f       	subi	r24, 0xFF	; 255
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	af 4f       	sbci	r26, 0xFF	; 255
    16ce:	bf 43       	sbci	r27, 0x3F	; 63
    16d0:	28 f3       	brcs	.-54     	; 0x169c <_fpadd_parts+0x1f4>
    16d2:	0b c0       	rjmp	.+22     	; 0x16ea <_fpadd_parts+0x242>
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	33 82       	std	Z+3, r3	; 0x03
    16d8:	22 82       	std	Z+2, r2	; 0x02
    16da:	ea 0c       	add	r14, r10
    16dc:	fb 1c       	adc	r15, r11
    16de:	0c 1d       	adc	r16, r12
    16e0:	1d 1d       	adc	r17, r13
    16e2:	e4 82       	std	Z+4, r14	; 0x04
    16e4:	f5 82       	std	Z+5, r15	; 0x05
    16e6:	06 83       	std	Z+6, r16	; 0x06
    16e8:	17 83       	std	Z+7, r17	; 0x07
    16ea:	83 e0       	ldi	r24, 0x03	; 3
    16ec:	80 83       	st	Z, r24
    16ee:	24 81       	ldd	r18, Z+4	; 0x04
    16f0:	35 81       	ldd	r19, Z+5	; 0x05
    16f2:	46 81       	ldd	r20, Z+6	; 0x06
    16f4:	57 81       	ldd	r21, Z+7	; 0x07
    16f6:	57 ff       	sbrs	r21, 7
    16f8:	1a c0       	rjmp	.+52     	; 0x172e <_fpadd_parts+0x286>
    16fa:	c9 01       	movw	r24, r18
    16fc:	aa 27       	eor	r26, r26
    16fe:	97 fd       	sbrc	r25, 7
    1700:	a0 95       	com	r26
    1702:	ba 2f       	mov	r27, r26
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	90 70       	andi	r25, 0x00	; 0
    1708:	a0 70       	andi	r26, 0x00	; 0
    170a:	b0 70       	andi	r27, 0x00	; 0
    170c:	56 95       	lsr	r21
    170e:	47 95       	ror	r20
    1710:	37 95       	ror	r19
    1712:	27 95       	ror	r18
    1714:	82 2b       	or	r24, r18
    1716:	93 2b       	or	r25, r19
    1718:	a4 2b       	or	r26, r20
    171a:	b5 2b       	or	r27, r21
    171c:	84 83       	std	Z+4, r24	; 0x04
    171e:	95 83       	std	Z+5, r25	; 0x05
    1720:	a6 83       	std	Z+6, r26	; 0x06
    1722:	b7 83       	std	Z+7, r27	; 0x07
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	93 83       	std	Z+3, r25	; 0x03
    172c:	82 83       	std	Z+2, r24	; 0x02
    172e:	df 01       	movw	r26, r30
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <_fpadd_parts+0x28c>
    1732:	d2 01       	movw	r26, r4
    1734:	cd 01       	movw	r24, r26
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	e2 e1       	ldi	r30, 0x12	; 18
    173c:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__epilogue_restores__>

00001740 <__subsf3>:
    1740:	a0 e2       	ldi	r26, 0x20	; 32
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e6 ea       	ldi	r30, 0xA6	; 166
    1746:	fb e0       	ldi	r31, 0x0B	; 11
    1748:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__stack+0x5>
    174c:	69 83       	std	Y+1, r22	; 0x01
    174e:	7a 83       	std	Y+2, r23	; 0x02
    1750:	8b 83       	std	Y+3, r24	; 0x03
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	2d 83       	std	Y+5, r18	; 0x05
    1756:	3e 83       	std	Y+6, r19	; 0x06
    1758:	4f 83       	std	Y+7, r20	; 0x07
    175a:	58 87       	std	Y+8, r21	; 0x08
    175c:	e9 e0       	ldi	r30, 0x09	; 9
    175e:	ee 2e       	mov	r14, r30
    1760:	f1 2c       	mov	r15, r1
    1762:	ec 0e       	add	r14, r28
    1764:	fd 1e       	adc	r15, r29
    1766:	ce 01       	movw	r24, r28
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	b7 01       	movw	r22, r14
    176c:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1770:	8e 01       	movw	r16, r28
    1772:	0f 5e       	subi	r16, 0xEF	; 239
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	ce 01       	movw	r24, r28
    1778:	05 96       	adiw	r24, 0x05	; 5
    177a:	b8 01       	movw	r22, r16
    177c:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1780:	8a 89       	ldd	r24, Y+18	; 0x12
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	89 27       	eor	r24, r25
    1786:	8a 8b       	std	Y+18, r24	; 0x12
    1788:	c7 01       	movw	r24, r14
    178a:	b8 01       	movw	r22, r16
    178c:	ae 01       	movw	r20, r28
    178e:	47 5e       	subi	r20, 0xE7	; 231
    1790:	5f 4f       	sbci	r21, 0xFF	; 255
    1792:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_fpadd_parts>
    1796:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__pack_f>
    179a:	a0 96       	adiw	r28, 0x20	; 32
    179c:	e6 e0       	ldi	r30, 0x06	; 6
    179e:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__epilogue_restores__+0x18>

000017a2 <__addsf3>:
    17a2:	a0 e2       	ldi	r26, 0x20	; 32
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e7 ed       	ldi	r30, 0xD7	; 215
    17a8:	fb e0       	ldi	r31, 0x0B	; 11
    17aa:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__stack+0x5>
    17ae:	69 83       	std	Y+1, r22	; 0x01
    17b0:	7a 83       	std	Y+2, r23	; 0x02
    17b2:	8b 83       	std	Y+3, r24	; 0x03
    17b4:	9c 83       	std	Y+4, r25	; 0x04
    17b6:	2d 83       	std	Y+5, r18	; 0x05
    17b8:	3e 83       	std	Y+6, r19	; 0x06
    17ba:	4f 83       	std	Y+7, r20	; 0x07
    17bc:	58 87       	std	Y+8, r21	; 0x08
    17be:	f9 e0       	ldi	r31, 0x09	; 9
    17c0:	ef 2e       	mov	r14, r31
    17c2:	f1 2c       	mov	r15, r1
    17c4:	ec 0e       	add	r14, r28
    17c6:	fd 1e       	adc	r15, r29
    17c8:	ce 01       	movw	r24, r28
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	b7 01       	movw	r22, r14
    17ce:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    17d2:	8e 01       	movw	r16, r28
    17d4:	0f 5e       	subi	r16, 0xEF	; 239
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	ce 01       	movw	r24, r28
    17da:	05 96       	adiw	r24, 0x05	; 5
    17dc:	b8 01       	movw	r22, r16
    17de:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    17e2:	c7 01       	movw	r24, r14
    17e4:	b8 01       	movw	r22, r16
    17e6:	ae 01       	movw	r20, r28
    17e8:	47 5e       	subi	r20, 0xE7	; 231
    17ea:	5f 4f       	sbci	r21, 0xFF	; 255
    17ec:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_fpadd_parts>
    17f0:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__pack_f>
    17f4:	a0 96       	adiw	r28, 0x20	; 32
    17f6:	e6 e0       	ldi	r30, 0x06	; 6
    17f8:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__epilogue_restores__+0x18>

000017fc <__mulsf3>:
    17fc:	a0 e2       	ldi	r26, 0x20	; 32
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e4 e0       	ldi	r30, 0x04	; 4
    1802:	fc e0       	ldi	r31, 0x0C	; 12
    1804:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__prologue_saves__>
    1808:	69 83       	std	Y+1, r22	; 0x01
    180a:	7a 83       	std	Y+2, r23	; 0x02
    180c:	8b 83       	std	Y+3, r24	; 0x03
    180e:	9c 83       	std	Y+4, r25	; 0x04
    1810:	2d 83       	std	Y+5, r18	; 0x05
    1812:	3e 83       	std	Y+6, r19	; 0x06
    1814:	4f 83       	std	Y+7, r20	; 0x07
    1816:	58 87       	std	Y+8, r21	; 0x08
    1818:	ce 01       	movw	r24, r28
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	be 01       	movw	r22, r28
    181e:	67 5f       	subi	r22, 0xF7	; 247
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1826:	ce 01       	movw	r24, r28
    1828:	05 96       	adiw	r24, 0x05	; 5
    182a:	be 01       	movw	r22, r28
    182c:	6f 5e       	subi	r22, 0xEF	; 239
    182e:	7f 4f       	sbci	r23, 0xFF	; 255
    1830:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1834:	99 85       	ldd	r25, Y+9	; 0x09
    1836:	92 30       	cpi	r25, 0x02	; 2
    1838:	88 f0       	brcs	.+34     	; 0x185c <__mulsf3+0x60>
    183a:	89 89       	ldd	r24, Y+17	; 0x11
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	c8 f0       	brcs	.+50     	; 0x1872 <__mulsf3+0x76>
    1840:	94 30       	cpi	r25, 0x04	; 4
    1842:	19 f4       	brne	.+6      	; 0x184a <__mulsf3+0x4e>
    1844:	82 30       	cpi	r24, 0x02	; 2
    1846:	51 f4       	brne	.+20     	; 0x185c <__mulsf3+0x60>
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <__mulsf3+0x56>
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	29 f4       	brne	.+10     	; 0x1858 <__mulsf3+0x5c>
    184e:	92 30       	cpi	r25, 0x02	; 2
    1850:	81 f4       	brne	.+32     	; 0x1872 <__mulsf3+0x76>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	92 e0       	ldi	r25, 0x02	; 2
    1856:	c6 c0       	rjmp	.+396    	; 0x19e4 <__mulsf3+0x1e8>
    1858:	92 30       	cpi	r25, 0x02	; 2
    185a:	49 f4       	brne	.+18     	; 0x186e <__mulsf3+0x72>
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1860:	8a 89       	ldd	r24, Y+18	; 0x12
    1862:	98 13       	cpse	r25, r24
    1864:	21 e0       	ldi	r18, 0x01	; 1
    1866:	2a 87       	std	Y+10, r18	; 0x0a
    1868:	ce 01       	movw	r24, r28
    186a:	09 96       	adiw	r24, 0x09	; 9
    186c:	bb c0       	rjmp	.+374    	; 0x19e4 <__mulsf3+0x1e8>
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	49 f4       	brne	.+18     	; 0x1884 <__mulsf3+0x88>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	9a 85       	ldd	r25, Y+10	; 0x0a
    1876:	8a 89       	ldd	r24, Y+18	; 0x12
    1878:	98 13       	cpse	r25, r24
    187a:	21 e0       	ldi	r18, 0x01	; 1
    187c:	2a 8b       	std	Y+18, r18	; 0x12
    187e:	ce 01       	movw	r24, r28
    1880:	41 96       	adiw	r24, 0x11	; 17
    1882:	b0 c0       	rjmp	.+352    	; 0x19e4 <__mulsf3+0x1e8>
    1884:	2d 84       	ldd	r2, Y+13	; 0x0d
    1886:	3e 84       	ldd	r3, Y+14	; 0x0e
    1888:	4f 84       	ldd	r4, Y+15	; 0x0f
    188a:	58 88       	ldd	r5, Y+16	; 0x10
    188c:	6d 88       	ldd	r6, Y+21	; 0x15
    188e:	7e 88       	ldd	r7, Y+22	; 0x16
    1890:	8f 88       	ldd	r8, Y+23	; 0x17
    1892:	98 8c       	ldd	r9, Y+24	; 0x18
    1894:	ee 24       	eor	r14, r14
    1896:	ff 24       	eor	r15, r15
    1898:	87 01       	movw	r16, r14
    189a:	aa 24       	eor	r10, r10
    189c:	bb 24       	eor	r11, r11
    189e:	65 01       	movw	r12, r10
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	e0 e0       	ldi	r30, 0x00	; 0
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	c1 01       	movw	r24, r2
    18ae:	81 70       	andi	r24, 0x01	; 1
    18b0:	90 70       	andi	r25, 0x00	; 0
    18b2:	89 2b       	or	r24, r25
    18b4:	e9 f0       	breq	.+58     	; 0x18f0 <__mulsf3+0xf4>
    18b6:	e6 0c       	add	r14, r6
    18b8:	f7 1c       	adc	r15, r7
    18ba:	08 1d       	adc	r16, r8
    18bc:	19 1d       	adc	r17, r9
    18be:	9a 01       	movw	r18, r20
    18c0:	ab 01       	movw	r20, r22
    18c2:	2a 0d       	add	r18, r10
    18c4:	3b 1d       	adc	r19, r11
    18c6:	4c 1d       	adc	r20, r12
    18c8:	5d 1d       	adc	r21, r13
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e0       	ldi	r26, 0x00	; 0
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e6 14       	cp	r14, r6
    18d4:	f7 04       	cpc	r15, r7
    18d6:	08 05       	cpc	r16, r8
    18d8:	19 05       	cpc	r17, r9
    18da:	20 f4       	brcc	.+8      	; 0x18e4 <__mulsf3+0xe8>
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e0       	ldi	r26, 0x00	; 0
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ba 01       	movw	r22, r20
    18e6:	a9 01       	movw	r20, r18
    18e8:	48 0f       	add	r20, r24
    18ea:	59 1f       	adc	r21, r25
    18ec:	6a 1f       	adc	r22, r26
    18ee:	7b 1f       	adc	r23, r27
    18f0:	aa 0c       	add	r10, r10
    18f2:	bb 1c       	adc	r11, r11
    18f4:	cc 1c       	adc	r12, r12
    18f6:	dd 1c       	adc	r13, r13
    18f8:	97 fe       	sbrs	r9, 7
    18fa:	08 c0       	rjmp	.+16     	; 0x190c <__mulsf3+0x110>
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	a8 2a       	or	r10, r24
    1906:	b9 2a       	or	r11, r25
    1908:	ca 2a       	or	r12, r26
    190a:	db 2a       	or	r13, r27
    190c:	31 96       	adiw	r30, 0x01	; 1
    190e:	e0 32       	cpi	r30, 0x20	; 32
    1910:	f1 05       	cpc	r31, r1
    1912:	49 f0       	breq	.+18     	; 0x1926 <__mulsf3+0x12a>
    1914:	66 0c       	add	r6, r6
    1916:	77 1c       	adc	r7, r7
    1918:	88 1c       	adc	r8, r8
    191a:	99 1c       	adc	r9, r9
    191c:	56 94       	lsr	r5
    191e:	47 94       	ror	r4
    1920:	37 94       	ror	r3
    1922:	27 94       	ror	r2
    1924:	c3 cf       	rjmp	.-122    	; 0x18ac <__mulsf3+0xb0>
    1926:	fa 85       	ldd	r31, Y+10	; 0x0a
    1928:	ea 89       	ldd	r30, Y+18	; 0x12
    192a:	2b 89       	ldd	r18, Y+19	; 0x13
    192c:	3c 89       	ldd	r19, Y+20	; 0x14
    192e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1930:	9c 85       	ldd	r25, Y+12	; 0x0c
    1932:	28 0f       	add	r18, r24
    1934:	39 1f       	adc	r19, r25
    1936:	2e 5f       	subi	r18, 0xFE	; 254
    1938:	3f 4f       	sbci	r19, 0xFF	; 255
    193a:	17 c0       	rjmp	.+46     	; 0x196a <__mulsf3+0x16e>
    193c:	ca 01       	movw	r24, r20
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	90 70       	andi	r25, 0x00	; 0
    1942:	89 2b       	or	r24, r25
    1944:	61 f0       	breq	.+24     	; 0x195e <__mulsf3+0x162>
    1946:	16 95       	lsr	r17
    1948:	07 95       	ror	r16
    194a:	f7 94       	ror	r15
    194c:	e7 94       	ror	r14
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e8       	ldi	r27, 0x80	; 128
    1956:	e8 2a       	or	r14, r24
    1958:	f9 2a       	or	r15, r25
    195a:	0a 2b       	or	r16, r26
    195c:	1b 2b       	or	r17, r27
    195e:	76 95       	lsr	r23
    1960:	67 95       	ror	r22
    1962:	57 95       	ror	r21
    1964:	47 95       	ror	r20
    1966:	2f 5f       	subi	r18, 0xFF	; 255
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	77 fd       	sbrc	r23, 7
    196c:	e7 cf       	rjmp	.-50     	; 0x193c <__mulsf3+0x140>
    196e:	0c c0       	rjmp	.+24     	; 0x1988 <__mulsf3+0x18c>
    1970:	44 0f       	add	r20, r20
    1972:	55 1f       	adc	r21, r21
    1974:	66 1f       	adc	r22, r22
    1976:	77 1f       	adc	r23, r23
    1978:	17 fd       	sbrc	r17, 7
    197a:	41 60       	ori	r20, 0x01	; 1
    197c:	ee 0c       	add	r14, r14
    197e:	ff 1c       	adc	r15, r15
    1980:	00 1f       	adc	r16, r16
    1982:	11 1f       	adc	r17, r17
    1984:	21 50       	subi	r18, 0x01	; 1
    1986:	30 40       	sbci	r19, 0x00	; 0
    1988:	40 30       	cpi	r20, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	59 07       	cpc	r21, r25
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	69 07       	cpc	r22, r25
    1992:	90 e4       	ldi	r25, 0x40	; 64
    1994:	79 07       	cpc	r23, r25
    1996:	60 f3       	brcs	.-40     	; 0x1970 <__mulsf3+0x174>
    1998:	2b 8f       	std	Y+27, r18	; 0x1b
    199a:	3c 8f       	std	Y+28, r19	; 0x1c
    199c:	db 01       	movw	r26, r22
    199e:	ca 01       	movw	r24, r20
    19a0:	8f 77       	andi	r24, 0x7F	; 127
    19a2:	90 70       	andi	r25, 0x00	; 0
    19a4:	a0 70       	andi	r26, 0x00	; 0
    19a6:	b0 70       	andi	r27, 0x00	; 0
    19a8:	80 34       	cpi	r24, 0x40	; 64
    19aa:	91 05       	cpc	r25, r1
    19ac:	a1 05       	cpc	r26, r1
    19ae:	b1 05       	cpc	r27, r1
    19b0:	61 f4       	brne	.+24     	; 0x19ca <__mulsf3+0x1ce>
    19b2:	47 fd       	sbrc	r20, 7
    19b4:	0a c0       	rjmp	.+20     	; 0x19ca <__mulsf3+0x1ce>
    19b6:	e1 14       	cp	r14, r1
    19b8:	f1 04       	cpc	r15, r1
    19ba:	01 05       	cpc	r16, r1
    19bc:	11 05       	cpc	r17, r1
    19be:	29 f0       	breq	.+10     	; 0x19ca <__mulsf3+0x1ce>
    19c0:	40 5c       	subi	r20, 0xC0	; 192
    19c2:	5f 4f       	sbci	r21, 0xFF	; 255
    19c4:	6f 4f       	sbci	r22, 0xFF	; 255
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255
    19c8:	40 78       	andi	r20, 0x80	; 128
    19ca:	1a 8e       	std	Y+26, r1	; 0x1a
    19cc:	fe 17       	cp	r31, r30
    19ce:	11 f0       	breq	.+4      	; 0x19d4 <__mulsf3+0x1d8>
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	8a 8f       	std	Y+26, r24	; 0x1a
    19d4:	4d 8f       	std	Y+29, r20	; 0x1d
    19d6:	5e 8f       	std	Y+30, r21	; 0x1e
    19d8:	6f 8f       	std	Y+31, r22	; 0x1f
    19da:	78 a3       	std	Y+32, r23	; 0x20
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	89 8f       	std	Y+25, r24	; 0x19
    19e0:	ce 01       	movw	r24, r28
    19e2:	49 96       	adiw	r24, 0x19	; 25
    19e4:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__pack_f>
    19e8:	a0 96       	adiw	r28, 0x20	; 32
    19ea:	e2 e1       	ldi	r30, 0x12	; 18
    19ec:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__epilogue_restores__>

000019f0 <__divsf3>:
    19f0:	a8 e1       	ldi	r26, 0x18	; 24
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ee ef       	ldi	r30, 0xFE	; 254
    19f6:	fc e0       	ldi	r31, 0x0C	; 12
    19f8:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__+0x10>
    19fc:	69 83       	std	Y+1, r22	; 0x01
    19fe:	7a 83       	std	Y+2, r23	; 0x02
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	2d 83       	std	Y+5, r18	; 0x05
    1a06:	3e 83       	std	Y+6, r19	; 0x06
    1a08:	4f 83       	std	Y+7, r20	; 0x07
    1a0a:	58 87       	std	Y+8, r21	; 0x08
    1a0c:	b9 e0       	ldi	r27, 0x09	; 9
    1a0e:	eb 2e       	mov	r14, r27
    1a10:	f1 2c       	mov	r15, r1
    1a12:	ec 0e       	add	r14, r28
    1a14:	fd 1e       	adc	r15, r29
    1a16:	ce 01       	movw	r24, r28
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	b7 01       	movw	r22, r14
    1a1c:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1a20:	8e 01       	movw	r16, r28
    1a22:	0f 5e       	subi	r16, 0xEF	; 239
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	ce 01       	movw	r24, r28
    1a28:	05 96       	adiw	r24, 0x05	; 5
    1a2a:	b8 01       	movw	r22, r16
    1a2c:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1a30:	29 85       	ldd	r18, Y+9	; 0x09
    1a32:	22 30       	cpi	r18, 0x02	; 2
    1a34:	08 f4       	brcc	.+2      	; 0x1a38 <__divsf3+0x48>
    1a36:	7e c0       	rjmp	.+252    	; 0x1b34 <__divsf3+0x144>
    1a38:	39 89       	ldd	r19, Y+17	; 0x11
    1a3a:	32 30       	cpi	r19, 0x02	; 2
    1a3c:	10 f4       	brcc	.+4      	; 0x1a42 <__divsf3+0x52>
    1a3e:	b8 01       	movw	r22, r16
    1a40:	7c c0       	rjmp	.+248    	; 0x1b3a <__divsf3+0x14a>
    1a42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a44:	9a 89       	ldd	r25, Y+18	; 0x12
    1a46:	89 27       	eor	r24, r25
    1a48:	8a 87       	std	Y+10, r24	; 0x0a
    1a4a:	24 30       	cpi	r18, 0x04	; 4
    1a4c:	11 f0       	breq	.+4      	; 0x1a52 <__divsf3+0x62>
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 f4       	brne	.+12     	; 0x1a5e <__divsf3+0x6e>
    1a52:	23 17       	cp	r18, r19
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <__divsf3+0x68>
    1a56:	6e c0       	rjmp	.+220    	; 0x1b34 <__divsf3+0x144>
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	72 e0       	ldi	r23, 0x02	; 2
    1a5c:	6e c0       	rjmp	.+220    	; 0x1b3a <__divsf3+0x14a>
    1a5e:	34 30       	cpi	r19, 0x04	; 4
    1a60:	39 f4       	brne	.+14     	; 0x1a70 <__divsf3+0x80>
    1a62:	1d 86       	std	Y+13, r1	; 0x0d
    1a64:	1e 86       	std	Y+14, r1	; 0x0e
    1a66:	1f 86       	std	Y+15, r1	; 0x0f
    1a68:	18 8a       	std	Y+16, r1	; 0x10
    1a6a:	1c 86       	std	Y+12, r1	; 0x0c
    1a6c:	1b 86       	std	Y+11, r1	; 0x0b
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <__divsf3+0x88>
    1a70:	32 30       	cpi	r19, 0x02	; 2
    1a72:	21 f4       	brne	.+8      	; 0x1a7c <__divsf3+0x8c>
    1a74:	84 e0       	ldi	r24, 0x04	; 4
    1a76:	89 87       	std	Y+9, r24	; 0x09
    1a78:	b7 01       	movw	r22, r14
    1a7a:	5f c0       	rjmp	.+190    	; 0x1b3a <__divsf3+0x14a>
    1a7c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a7e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a80:	8b 89       	ldd	r24, Y+19	; 0x13
    1a82:	9c 89       	ldd	r25, Y+20	; 0x14
    1a84:	28 1b       	sub	r18, r24
    1a86:	39 0b       	sbc	r19, r25
    1a88:	3c 87       	std	Y+12, r19	; 0x0c
    1a8a:	2b 87       	std	Y+11, r18	; 0x0b
    1a8c:	ed 84       	ldd	r14, Y+13	; 0x0d
    1a8e:	fe 84       	ldd	r15, Y+14	; 0x0e
    1a90:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a92:	18 89       	ldd	r17, Y+16	; 0x10
    1a94:	ad 88       	ldd	r10, Y+21	; 0x15
    1a96:	be 88       	ldd	r11, Y+22	; 0x16
    1a98:	cf 88       	ldd	r12, Y+23	; 0x17
    1a9a:	d8 8c       	ldd	r13, Y+24	; 0x18
    1a9c:	ea 14       	cp	r14, r10
    1a9e:	fb 04       	cpc	r15, r11
    1aa0:	0c 05       	cpc	r16, r12
    1aa2:	1d 05       	cpc	r17, r13
    1aa4:	40 f4       	brcc	.+16     	; 0x1ab6 <__divsf3+0xc6>
    1aa6:	ee 0c       	add	r14, r14
    1aa8:	ff 1c       	adc	r15, r15
    1aaa:	00 1f       	adc	r16, r16
    1aac:	11 1f       	adc	r17, r17
    1aae:	21 50       	subi	r18, 0x01	; 1
    1ab0:	30 40       	sbci	r19, 0x00	; 0
    1ab2:	3c 87       	std	Y+12, r19	; 0x0c
    1ab4:	2b 87       	std	Y+11, r18	; 0x0b
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a0 e0       	ldi	r26, 0x00	; 0
    1ac4:	b0 e4       	ldi	r27, 0x40	; 64
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	ea 14       	cp	r14, r10
    1acc:	fb 04       	cpc	r15, r11
    1ace:	0c 05       	cpc	r16, r12
    1ad0:	1d 05       	cpc	r17, r13
    1ad2:	40 f0       	brcs	.+16     	; 0x1ae4 <__divsf3+0xf4>
    1ad4:	28 2b       	or	r18, r24
    1ad6:	39 2b       	or	r19, r25
    1ad8:	4a 2b       	or	r20, r26
    1ada:	5b 2b       	or	r21, r27
    1adc:	ea 18       	sub	r14, r10
    1ade:	fb 08       	sbc	r15, r11
    1ae0:	0c 09       	sbc	r16, r12
    1ae2:	1d 09       	sbc	r17, r13
    1ae4:	b6 95       	lsr	r27
    1ae6:	a7 95       	ror	r26
    1ae8:	97 95       	ror	r25
    1aea:	87 95       	ror	r24
    1aec:	ee 0c       	add	r14, r14
    1aee:	ff 1c       	adc	r15, r15
    1af0:	00 1f       	adc	r16, r16
    1af2:	11 1f       	adc	r17, r17
    1af4:	6f 5f       	subi	r22, 0xFF	; 255
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	6f 31       	cpi	r22, 0x1F	; 31
    1afa:	71 05       	cpc	r23, r1
    1afc:	31 f7       	brne	.-52     	; 0x1aca <__divsf3+0xda>
    1afe:	da 01       	movw	r26, r20
    1b00:	c9 01       	movw	r24, r18
    1b02:	8f 77       	andi	r24, 0x7F	; 127
    1b04:	90 70       	andi	r25, 0x00	; 0
    1b06:	a0 70       	andi	r26, 0x00	; 0
    1b08:	b0 70       	andi	r27, 0x00	; 0
    1b0a:	80 34       	cpi	r24, 0x40	; 64
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	a1 05       	cpc	r26, r1
    1b10:	b1 05       	cpc	r27, r1
    1b12:	61 f4       	brne	.+24     	; 0x1b2c <__divsf3+0x13c>
    1b14:	27 fd       	sbrc	r18, 7
    1b16:	0a c0       	rjmp	.+20     	; 0x1b2c <__divsf3+0x13c>
    1b18:	e1 14       	cp	r14, r1
    1b1a:	f1 04       	cpc	r15, r1
    1b1c:	01 05       	cpc	r16, r1
    1b1e:	11 05       	cpc	r17, r1
    1b20:	29 f0       	breq	.+10     	; 0x1b2c <__divsf3+0x13c>
    1b22:	20 5c       	subi	r18, 0xC0	; 192
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	4f 4f       	sbci	r20, 0xFF	; 255
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2a:	20 78       	andi	r18, 0x80	; 128
    1b2c:	2d 87       	std	Y+13, r18	; 0x0d
    1b2e:	3e 87       	std	Y+14, r19	; 0x0e
    1b30:	4f 87       	std	Y+15, r20	; 0x0f
    1b32:	58 8b       	std	Y+16, r21	; 0x10
    1b34:	be 01       	movw	r22, r28
    1b36:	67 5f       	subi	r22, 0xF7	; 247
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__pack_f>
    1b40:	68 96       	adiw	r28, 0x18	; 24
    1b42:	ea e0       	ldi	r30, 0x0A	; 10
    1b44:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__+0x10>

00001b48 <__gtsf2>:
    1b48:	a8 e1       	ldi	r26, 0x18	; 24
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	ea ea       	ldi	r30, 0xAA	; 170
    1b4e:	fd e0       	ldi	r31, 0x0D	; 13
    1b50:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__stack+0x5>
    1b54:	69 83       	std	Y+1, r22	; 0x01
    1b56:	7a 83       	std	Y+2, r23	; 0x02
    1b58:	8b 83       	std	Y+3, r24	; 0x03
    1b5a:	9c 83       	std	Y+4, r25	; 0x04
    1b5c:	2d 83       	std	Y+5, r18	; 0x05
    1b5e:	3e 83       	std	Y+6, r19	; 0x06
    1b60:	4f 83       	std	Y+7, r20	; 0x07
    1b62:	58 87       	std	Y+8, r21	; 0x08
    1b64:	89 e0       	ldi	r24, 0x09	; 9
    1b66:	e8 2e       	mov	r14, r24
    1b68:	f1 2c       	mov	r15, r1
    1b6a:	ec 0e       	add	r14, r28
    1b6c:	fd 1e       	adc	r15, r29
    1b6e:	ce 01       	movw	r24, r28
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	b7 01       	movw	r22, r14
    1b74:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1b78:	8e 01       	movw	r16, r28
    1b7a:	0f 5e       	subi	r16, 0xEF	; 239
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	ce 01       	movw	r24, r28
    1b80:	05 96       	adiw	r24, 0x05	; 5
    1b82:	b8 01       	movw	r22, r16
    1b84:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1b88:	89 85       	ldd	r24, Y+9	; 0x09
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	40 f0       	brcs	.+16     	; 0x1b9e <__gtsf2+0x56>
    1b8e:	89 89       	ldd	r24, Y+17	; 0x11
    1b90:	82 30       	cpi	r24, 0x02	; 2
    1b92:	28 f0       	brcs	.+10     	; 0x1b9e <__gtsf2+0x56>
    1b94:	c7 01       	movw	r24, r14
    1b96:	b8 01       	movw	r22, r16
    1b98:	0e 94 9d 10 	call	0x213a	; 0x213a <__fpcmp_parts_f>
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <__gtsf2+0x58>
    1b9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ba0:	68 96       	adiw	r28, 0x18	; 24
    1ba2:	e6 e0       	ldi	r30, 0x06	; 6
    1ba4:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__epilogue_restores__+0x18>

00001ba8 <__gesf2>:
    1ba8:	a8 e1       	ldi	r26, 0x18	; 24
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ea ed       	ldi	r30, 0xDA	; 218
    1bae:	fd e0       	ldi	r31, 0x0D	; 13
    1bb0:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__stack+0x5>
    1bb4:	69 83       	std	Y+1, r22	; 0x01
    1bb6:	7a 83       	std	Y+2, r23	; 0x02
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	2d 83       	std	Y+5, r18	; 0x05
    1bbe:	3e 83       	std	Y+6, r19	; 0x06
    1bc0:	4f 83       	std	Y+7, r20	; 0x07
    1bc2:	58 87       	std	Y+8, r21	; 0x08
    1bc4:	89 e0       	ldi	r24, 0x09	; 9
    1bc6:	e8 2e       	mov	r14, r24
    1bc8:	f1 2c       	mov	r15, r1
    1bca:	ec 0e       	add	r14, r28
    1bcc:	fd 1e       	adc	r15, r29
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	b7 01       	movw	r22, r14
    1bd4:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1bd8:	8e 01       	movw	r16, r28
    1bda:	0f 5e       	subi	r16, 0xEF	; 239
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	ce 01       	movw	r24, r28
    1be0:	05 96       	adiw	r24, 0x05	; 5
    1be2:	b8 01       	movw	r22, r16
    1be4:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	40 f0       	brcs	.+16     	; 0x1bfe <__gesf2+0x56>
    1bee:	89 89       	ldd	r24, Y+17	; 0x11
    1bf0:	82 30       	cpi	r24, 0x02	; 2
    1bf2:	28 f0       	brcs	.+10     	; 0x1bfe <__gesf2+0x56>
    1bf4:	c7 01       	movw	r24, r14
    1bf6:	b8 01       	movw	r22, r16
    1bf8:	0e 94 9d 10 	call	0x213a	; 0x213a <__fpcmp_parts_f>
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <__gesf2+0x58>
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	68 96       	adiw	r28, 0x18	; 24
    1c02:	e6 e0       	ldi	r30, 0x06	; 6
    1c04:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__epilogue_restores__+0x18>

00001c08 <__ltsf2>:
    1c08:	a8 e1       	ldi	r26, 0x18	; 24
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ea e0       	ldi	r30, 0x0A	; 10
    1c0e:	fe e0       	ldi	r31, 0x0E	; 14
    1c10:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__stack+0x5>
    1c14:	69 83       	std	Y+1, r22	; 0x01
    1c16:	7a 83       	std	Y+2, r23	; 0x02
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	9c 83       	std	Y+4, r25	; 0x04
    1c1c:	2d 83       	std	Y+5, r18	; 0x05
    1c1e:	3e 83       	std	Y+6, r19	; 0x06
    1c20:	4f 83       	std	Y+7, r20	; 0x07
    1c22:	58 87       	std	Y+8, r21	; 0x08
    1c24:	89 e0       	ldi	r24, 0x09	; 9
    1c26:	e8 2e       	mov	r14, r24
    1c28:	f1 2c       	mov	r15, r1
    1c2a:	ec 0e       	add	r14, r28
    1c2c:	fd 1e       	adc	r15, r29
    1c2e:	ce 01       	movw	r24, r28
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	b7 01       	movw	r22, r14
    1c34:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1c38:	8e 01       	movw	r16, r28
    1c3a:	0f 5e       	subi	r16, 0xEF	; 239
    1c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3e:	ce 01       	movw	r24, r28
    1c40:	05 96       	adiw	r24, 0x05	; 5
    1c42:	b8 01       	movw	r22, r16
    1c44:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	82 30       	cpi	r24, 0x02	; 2
    1c4c:	40 f0       	brcs	.+16     	; 0x1c5e <__ltsf2+0x56>
    1c4e:	89 89       	ldd	r24, Y+17	; 0x11
    1c50:	82 30       	cpi	r24, 0x02	; 2
    1c52:	28 f0       	brcs	.+10     	; 0x1c5e <__ltsf2+0x56>
    1c54:	c7 01       	movw	r24, r14
    1c56:	b8 01       	movw	r22, r16
    1c58:	0e 94 9d 10 	call	0x213a	; 0x213a <__fpcmp_parts_f>
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <__ltsf2+0x58>
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	68 96       	adiw	r28, 0x18	; 24
    1c62:	e6 e0       	ldi	r30, 0x06	; 6
    1c64:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__epilogue_restores__+0x18>

00001c68 <__fixsfsi>:
    1c68:	ac e0       	ldi	r26, 0x0C	; 12
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	ea e3       	ldi	r30, 0x3A	; 58
    1c6e:	fe e0       	ldi	r31, 0x0E	; 14
    1c70:	0c 94 06 11 	jmp	0x220c	; 0x220c <__stack+0xd>
    1c74:	69 83       	std	Y+1, r22	; 0x01
    1c76:	7a 83       	std	Y+2, r23	; 0x02
    1c78:	8b 83       	std	Y+3, r24	; 0x03
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	be 01       	movw	r22, r28
    1c82:	6b 5f       	subi	r22, 0xFB	; 251
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	0e 94 25 10 	call	0x204a	; 0x204a <__unpack_f>
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	61 f1       	breq	.+88     	; 0x1ce8 <__fixsfsi+0x80>
    1c90:	82 30       	cpi	r24, 0x02	; 2
    1c92:	50 f1       	brcs	.+84     	; 0x1ce8 <__fixsfsi+0x80>
    1c94:	84 30       	cpi	r24, 0x04	; 4
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <__fixsfsi+0x38>
    1c98:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9a:	88 23       	and	r24, r24
    1c9c:	51 f1       	breq	.+84     	; 0x1cf2 <__fixsfsi+0x8a>
    1c9e:	2e c0       	rjmp	.+92     	; 0x1cfc <__fixsfsi+0x94>
    1ca0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ca2:	38 85       	ldd	r19, Y+8	; 0x08
    1ca4:	37 fd       	sbrc	r19, 7
    1ca6:	20 c0       	rjmp	.+64     	; 0x1ce8 <__fixsfsi+0x80>
    1ca8:	6e 81       	ldd	r22, Y+6	; 0x06
    1caa:	2f 31       	cpi	r18, 0x1F	; 31
    1cac:	31 05       	cpc	r19, r1
    1cae:	1c f0       	brlt	.+6      	; 0x1cb6 <__fixsfsi+0x4e>
    1cb0:	66 23       	and	r22, r22
    1cb2:	f9 f0       	breq	.+62     	; 0x1cf2 <__fixsfsi+0x8a>
    1cb4:	23 c0       	rjmp	.+70     	; 0x1cfc <__fixsfsi+0x94>
    1cb6:	8e e1       	ldi	r24, 0x1E	; 30
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	82 1b       	sub	r24, r18
    1cbc:	93 0b       	sbc	r25, r19
    1cbe:	29 85       	ldd	r18, Y+9	; 0x09
    1cc0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cc2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cc4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <__fixsfsi+0x68>
    1cc8:	56 95       	lsr	r21
    1cca:	47 95       	ror	r20
    1ccc:	37 95       	ror	r19
    1cce:	27 95       	ror	r18
    1cd0:	8a 95       	dec	r24
    1cd2:	d2 f7       	brpl	.-12     	; 0x1cc8 <__fixsfsi+0x60>
    1cd4:	66 23       	and	r22, r22
    1cd6:	b1 f0       	breq	.+44     	; 0x1d04 <__fixsfsi+0x9c>
    1cd8:	50 95       	com	r21
    1cda:	40 95       	com	r20
    1cdc:	30 95       	com	r19
    1cde:	21 95       	neg	r18
    1ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce6:	0e c0       	rjmp	.+28     	; 0x1d04 <__fixsfsi+0x9c>
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	09 c0       	rjmp	.+18     	; 0x1d04 <__fixsfsi+0x9c>
    1cf2:	2f ef       	ldi	r18, 0xFF	; 255
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f ef       	ldi	r20, 0xFF	; 255
    1cf8:	5f e7       	ldi	r21, 0x7F	; 127
    1cfa:	04 c0       	rjmp	.+8      	; 0x1d04 <__fixsfsi+0x9c>
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	50 e8       	ldi	r21, 0x80	; 128
    1d04:	b9 01       	movw	r22, r18
    1d06:	ca 01       	movw	r24, r20
    1d08:	2c 96       	adiw	r28, 0x0c	; 12
    1d0a:	e2 e0       	ldi	r30, 0x02	; 2
    1d0c:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__epilogue_restores__+0x20>

00001d10 <__floatunsisf>:
    1d10:	a8 e0       	ldi	r26, 0x08	; 8
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	ee e8       	ldi	r30, 0x8E	; 142
    1d16:	fe e0       	ldi	r31, 0x0E	; 14
    1d18:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__+0x10>
    1d1c:	7b 01       	movw	r14, r22
    1d1e:	8c 01       	movw	r16, r24
    1d20:	61 15       	cp	r22, r1
    1d22:	71 05       	cpc	r23, r1
    1d24:	81 05       	cpc	r24, r1
    1d26:	91 05       	cpc	r25, r1
    1d28:	19 f4       	brne	.+6      	; 0x1d30 <__floatunsisf+0x20>
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	60 c0       	rjmp	.+192    	; 0x1df0 <__floatunsisf+0xe0>
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	8e e1       	ldi	r24, 0x1E	; 30
    1d36:	c8 2e       	mov	r12, r24
    1d38:	d1 2c       	mov	r13, r1
    1d3a:	dc 82       	std	Y+4, r13	; 0x04
    1d3c:	cb 82       	std	Y+3, r12	; 0x03
    1d3e:	ed 82       	std	Y+5, r14	; 0x05
    1d40:	fe 82       	std	Y+6, r15	; 0x06
    1d42:	0f 83       	std	Y+7, r16	; 0x07
    1d44:	18 87       	std	Y+8, r17	; 0x08
    1d46:	c8 01       	movw	r24, r16
    1d48:	b7 01       	movw	r22, r14
    1d4a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__clzsi2>
    1d4e:	fc 01       	movw	r30, r24
    1d50:	31 97       	sbiw	r30, 0x01	; 1
    1d52:	f7 ff       	sbrs	r31, 7
    1d54:	3b c0       	rjmp	.+118    	; 0x1dcc <__floatunsisf+0xbc>
    1d56:	22 27       	eor	r18, r18
    1d58:	33 27       	eor	r19, r19
    1d5a:	2e 1b       	sub	r18, r30
    1d5c:	3f 0b       	sbc	r19, r31
    1d5e:	57 01       	movw	r10, r14
    1d60:	68 01       	movw	r12, r16
    1d62:	02 2e       	mov	r0, r18
    1d64:	04 c0       	rjmp	.+8      	; 0x1d6e <__floatunsisf+0x5e>
    1d66:	d6 94       	lsr	r13
    1d68:	c7 94       	ror	r12
    1d6a:	b7 94       	ror	r11
    1d6c:	a7 94       	ror	r10
    1d6e:	0a 94       	dec	r0
    1d70:	d2 f7       	brpl	.-12     	; 0x1d66 <__floatunsisf+0x56>
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	04 c0       	rjmp	.+8      	; 0x1d8c <__floatunsisf+0x7c>
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	aa 1f       	adc	r26, r26
    1d8a:	bb 1f       	adc	r27, r27
    1d8c:	2a 95       	dec	r18
    1d8e:	d2 f7       	brpl	.-12     	; 0x1d84 <__floatunsisf+0x74>
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	a1 09       	sbc	r26, r1
    1d94:	b1 09       	sbc	r27, r1
    1d96:	8e 21       	and	r24, r14
    1d98:	9f 21       	and	r25, r15
    1d9a:	a0 23       	and	r26, r16
    1d9c:	b1 23       	and	r27, r17
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	a1 05       	cpc	r26, r1
    1da2:	b1 05       	cpc	r27, r1
    1da4:	21 f0       	breq	.+8      	; 0x1dae <__floatunsisf+0x9e>
    1da6:	41 e0       	ldi	r20, 0x01	; 1
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	4a 29       	or	r20, r10
    1db0:	5b 29       	or	r21, r11
    1db2:	6c 29       	or	r22, r12
    1db4:	7d 29       	or	r23, r13
    1db6:	4d 83       	std	Y+5, r20	; 0x05
    1db8:	5e 83       	std	Y+6, r21	; 0x06
    1dba:	6f 83       	std	Y+7, r22	; 0x07
    1dbc:	78 87       	std	Y+8, r23	; 0x08
    1dbe:	8e e1       	ldi	r24, 0x1E	; 30
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	8e 1b       	sub	r24, r30
    1dc4:	9f 0b       	sbc	r25, r31
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
    1dca:	12 c0       	rjmp	.+36     	; 0x1df0 <__floatunsisf+0xe0>
    1dcc:	30 97       	sbiw	r30, 0x00	; 0
    1dce:	81 f0       	breq	.+32     	; 0x1df0 <__floatunsisf+0xe0>
    1dd0:	0e 2e       	mov	r0, r30
    1dd2:	04 c0       	rjmp	.+8      	; 0x1ddc <__floatunsisf+0xcc>
    1dd4:	ee 0c       	add	r14, r14
    1dd6:	ff 1c       	adc	r15, r15
    1dd8:	00 1f       	adc	r16, r16
    1dda:	11 1f       	adc	r17, r17
    1ddc:	0a 94       	dec	r0
    1dde:	d2 f7       	brpl	.-12     	; 0x1dd4 <__floatunsisf+0xc4>
    1de0:	ed 82       	std	Y+5, r14	; 0x05
    1de2:	fe 82       	std	Y+6, r15	; 0x06
    1de4:	0f 83       	std	Y+7, r16	; 0x07
    1de6:	18 87       	std	Y+8, r17	; 0x08
    1de8:	ce 1a       	sub	r12, r30
    1dea:	df 0a       	sbc	r13, r31
    1dec:	dc 82       	std	Y+4, r13	; 0x04
    1dee:	cb 82       	std	Y+3, r12	; 0x03
    1df0:	1a 82       	std	Y+2, r1	; 0x02
    1df2:	ce 01       	movw	r24, r28
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__pack_f>
    1dfa:	28 96       	adiw	r28, 0x08	; 8
    1dfc:	ea e0       	ldi	r30, 0x0A	; 10
    1dfe:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__+0x10>

00001e02 <__clzsi2>:
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	7b 01       	movw	r14, r22
    1e0c:	8c 01       	movw	r16, r24
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	e8 16       	cp	r14, r24
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	f8 06       	cpc	r15, r24
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	08 07       	cpc	r16, r24
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	18 07       	cpc	r17, r24
    1e1e:	88 f4       	brcc	.+34     	; 0x1e42 <__clzsi2+0x40>
    1e20:	8f ef       	ldi	r24, 0xFF	; 255
    1e22:	e8 16       	cp	r14, r24
    1e24:	f1 04       	cpc	r15, r1
    1e26:	01 05       	cpc	r16, r1
    1e28:	11 05       	cpc	r17, r1
    1e2a:	31 f0       	breq	.+12     	; 0x1e38 <__clzsi2+0x36>
    1e2c:	28 f0       	brcs	.+10     	; 0x1e38 <__clzsi2+0x36>
    1e2e:	88 e0       	ldi	r24, 0x08	; 8
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a0 e0       	ldi	r26, 0x00	; 0
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	17 c0       	rjmp	.+46     	; 0x1e66 <__clzsi2+0x64>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 e0       	ldi	r26, 0x00	; 0
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	12 c0       	rjmp	.+36     	; 0x1e66 <__clzsi2+0x64>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	e8 16       	cp	r14, r24
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	f8 06       	cpc	r15, r24
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	08 07       	cpc	r16, r24
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	18 07       	cpc	r17, r24
    1e52:	28 f0       	brcs	.+10     	; 0x1e5e <__clzsi2+0x5c>
    1e54:	88 e1       	ldi	r24, 0x18	; 24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e0       	ldi	r26, 0x00	; 0
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <__clzsi2+0x64>
    1e5e:	80 e1       	ldi	r24, 0x10	; 16
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a0 e0       	ldi	r26, 0x00	; 0
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	20 e2       	ldi	r18, 0x20	; 32
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	28 1b       	sub	r18, r24
    1e70:	39 0b       	sbc	r19, r25
    1e72:	4a 0b       	sbc	r20, r26
    1e74:	5b 0b       	sbc	r21, r27
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <__clzsi2+0x7e>
    1e78:	16 95       	lsr	r17
    1e7a:	07 95       	ror	r16
    1e7c:	f7 94       	ror	r15
    1e7e:	e7 94       	ror	r14
    1e80:	8a 95       	dec	r24
    1e82:	d2 f7       	brpl	.-12     	; 0x1e78 <__clzsi2+0x76>
    1e84:	f7 01       	movw	r30, r14
    1e86:	e8 5f       	subi	r30, 0xF8	; 248
    1e88:	fd 4f       	sbci	r31, 0xFD	; 253
    1e8a:	80 81       	ld	r24, Z
    1e8c:	28 1b       	sub	r18, r24
    1e8e:	31 09       	sbc	r19, r1
    1e90:	41 09       	sbc	r20, r1
    1e92:	51 09       	sbc	r21, r1
    1e94:	c9 01       	movw	r24, r18
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	08 95       	ret

00001ea0 <__pack_f>:
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	fc 01       	movw	r30, r24
    1eac:	e4 80       	ldd	r14, Z+4	; 0x04
    1eae:	f5 80       	ldd	r15, Z+5	; 0x05
    1eb0:	06 81       	ldd	r16, Z+6	; 0x06
    1eb2:	17 81       	ldd	r17, Z+7	; 0x07
    1eb4:	d1 80       	ldd	r13, Z+1	; 0x01
    1eb6:	80 81       	ld	r24, Z
    1eb8:	82 30       	cpi	r24, 0x02	; 2
    1eba:	48 f4       	brcc	.+18     	; 0x1ece <__pack_f+0x2e>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e1       	ldi	r26, 0x10	; 16
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e8 2a       	or	r14, r24
    1ec6:	f9 2a       	or	r15, r25
    1ec8:	0a 2b       	or	r16, r26
    1eca:	1b 2b       	or	r17, r27
    1ecc:	a5 c0       	rjmp	.+330    	; 0x2018 <__pack_f+0x178>
    1ece:	84 30       	cpi	r24, 0x04	; 4
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <__pack_f+0x34>
    1ed2:	9f c0       	rjmp	.+318    	; 0x2012 <__pack_f+0x172>
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	21 f4       	brne	.+8      	; 0x1ee0 <__pack_f+0x40>
    1ed8:	ee 24       	eor	r14, r14
    1eda:	ff 24       	eor	r15, r15
    1edc:	87 01       	movw	r16, r14
    1ede:	05 c0       	rjmp	.+10     	; 0x1eea <__pack_f+0x4a>
    1ee0:	e1 14       	cp	r14, r1
    1ee2:	f1 04       	cpc	r15, r1
    1ee4:	01 05       	cpc	r16, r1
    1ee6:	11 05       	cpc	r17, r1
    1ee8:	19 f4       	brne	.+6      	; 0x1ef0 <__pack_f+0x50>
    1eea:	e0 e0       	ldi	r30, 0x00	; 0
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	96 c0       	rjmp	.+300    	; 0x201c <__pack_f+0x17c>
    1ef0:	62 81       	ldd	r22, Z+2	; 0x02
    1ef2:	73 81       	ldd	r23, Z+3	; 0x03
    1ef4:	9f ef       	ldi	r25, 0xFF	; 255
    1ef6:	62 38       	cpi	r22, 0x82	; 130
    1ef8:	79 07       	cpc	r23, r25
    1efa:	0c f0       	brlt	.+2      	; 0x1efe <__pack_f+0x5e>
    1efc:	5b c0       	rjmp	.+182    	; 0x1fb4 <__pack_f+0x114>
    1efe:	22 e8       	ldi	r18, 0x82	; 130
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	26 1b       	sub	r18, r22
    1f04:	37 0b       	sbc	r19, r23
    1f06:	2a 31       	cpi	r18, 0x1A	; 26
    1f08:	31 05       	cpc	r19, r1
    1f0a:	2c f0       	brlt	.+10     	; 0x1f16 <__pack_f+0x76>
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	2a c0       	rjmp	.+84     	; 0x1f6a <__pack_f+0xca>
    1f16:	b8 01       	movw	r22, r16
    1f18:	a7 01       	movw	r20, r14
    1f1a:	02 2e       	mov	r0, r18
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <__pack_f+0x86>
    1f1e:	76 95       	lsr	r23
    1f20:	67 95       	ror	r22
    1f22:	57 95       	ror	r21
    1f24:	47 95       	ror	r20
    1f26:	0a 94       	dec	r0
    1f28:	d2 f7       	brpl	.-12     	; 0x1f1e <__pack_f+0x7e>
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a0 e0       	ldi	r26, 0x00	; 0
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <__pack_f+0x9c>
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	aa 1f       	adc	r26, r26
    1f3a:	bb 1f       	adc	r27, r27
    1f3c:	2a 95       	dec	r18
    1f3e:	d2 f7       	brpl	.-12     	; 0x1f34 <__pack_f+0x94>
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	a1 09       	sbc	r26, r1
    1f44:	b1 09       	sbc	r27, r1
    1f46:	8e 21       	and	r24, r14
    1f48:	9f 21       	and	r25, r15
    1f4a:	a0 23       	and	r26, r16
    1f4c:	b1 23       	and	r27, r17
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	a1 05       	cpc	r26, r1
    1f52:	b1 05       	cpc	r27, r1
    1f54:	21 f0       	breq	.+8      	; 0x1f5e <__pack_f+0xbe>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a0 e0       	ldi	r26, 0x00	; 0
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	9a 01       	movw	r18, r20
    1f60:	ab 01       	movw	r20, r22
    1f62:	28 2b       	or	r18, r24
    1f64:	39 2b       	or	r19, r25
    1f66:	4a 2b       	or	r20, r26
    1f68:	5b 2b       	or	r21, r27
    1f6a:	da 01       	movw	r26, r20
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	8f 77       	andi	r24, 0x7F	; 127
    1f70:	90 70       	andi	r25, 0x00	; 0
    1f72:	a0 70       	andi	r26, 0x00	; 0
    1f74:	b0 70       	andi	r27, 0x00	; 0
    1f76:	80 34       	cpi	r24, 0x40	; 64
    1f78:	91 05       	cpc	r25, r1
    1f7a:	a1 05       	cpc	r26, r1
    1f7c:	b1 05       	cpc	r27, r1
    1f7e:	39 f4       	brne	.+14     	; 0x1f8e <__pack_f+0xee>
    1f80:	27 ff       	sbrs	r18, 7
    1f82:	09 c0       	rjmp	.+18     	; 0x1f96 <__pack_f+0xf6>
    1f84:	20 5c       	subi	r18, 0xC0	; 192
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	4f 4f       	sbci	r20, 0xFF	; 255
    1f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8c:	04 c0       	rjmp	.+8      	; 0x1f96 <__pack_f+0xf6>
    1f8e:	21 5c       	subi	r18, 0xC1	; 193
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	4f 4f       	sbci	r20, 0xFF	; 255
    1f94:	5f 4f       	sbci	r21, 0xFF	; 255
    1f96:	e0 e0       	ldi	r30, 0x00	; 0
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	20 30       	cpi	r18, 0x00	; 0
    1f9c:	a0 e0       	ldi	r26, 0x00	; 0
    1f9e:	3a 07       	cpc	r19, r26
    1fa0:	a0 e0       	ldi	r26, 0x00	; 0
    1fa2:	4a 07       	cpc	r20, r26
    1fa4:	a0 e4       	ldi	r26, 0x40	; 64
    1fa6:	5a 07       	cpc	r21, r26
    1fa8:	10 f0       	brcs	.+4      	; 0x1fae <__pack_f+0x10e>
    1faa:	e1 e0       	ldi	r30, 0x01	; 1
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	79 01       	movw	r14, r18
    1fb0:	8a 01       	movw	r16, r20
    1fb2:	27 c0       	rjmp	.+78     	; 0x2002 <__pack_f+0x162>
    1fb4:	60 38       	cpi	r22, 0x80	; 128
    1fb6:	71 05       	cpc	r23, r1
    1fb8:	64 f5       	brge	.+88     	; 0x2012 <__pack_f+0x172>
    1fba:	fb 01       	movw	r30, r22
    1fbc:	e1 58       	subi	r30, 0x81	; 129
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	d8 01       	movw	r26, r16
    1fc2:	c7 01       	movw	r24, r14
    1fc4:	8f 77       	andi	r24, 0x7F	; 127
    1fc6:	90 70       	andi	r25, 0x00	; 0
    1fc8:	a0 70       	andi	r26, 0x00	; 0
    1fca:	b0 70       	andi	r27, 0x00	; 0
    1fcc:	80 34       	cpi	r24, 0x40	; 64
    1fce:	91 05       	cpc	r25, r1
    1fd0:	a1 05       	cpc	r26, r1
    1fd2:	b1 05       	cpc	r27, r1
    1fd4:	39 f4       	brne	.+14     	; 0x1fe4 <__pack_f+0x144>
    1fd6:	e7 fe       	sbrs	r14, 7
    1fd8:	0d c0       	rjmp	.+26     	; 0x1ff4 <__pack_f+0x154>
    1fda:	80 e4       	ldi	r24, 0x40	; 64
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <__pack_f+0x14c>
    1fe4:	8f e3       	ldi	r24, 0x3F	; 63
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 e0       	ldi	r26, 0x00	; 0
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e8 0e       	add	r14, r24
    1fee:	f9 1e       	adc	r15, r25
    1ff0:	0a 1f       	adc	r16, r26
    1ff2:	1b 1f       	adc	r17, r27
    1ff4:	17 ff       	sbrs	r17, 7
    1ff6:	05 c0       	rjmp	.+10     	; 0x2002 <__pack_f+0x162>
    1ff8:	16 95       	lsr	r17
    1ffa:	07 95       	ror	r16
    1ffc:	f7 94       	ror	r15
    1ffe:	e7 94       	ror	r14
    2000:	31 96       	adiw	r30, 0x01	; 1
    2002:	87 e0       	ldi	r24, 0x07	; 7
    2004:	16 95       	lsr	r17
    2006:	07 95       	ror	r16
    2008:	f7 94       	ror	r15
    200a:	e7 94       	ror	r14
    200c:	8a 95       	dec	r24
    200e:	d1 f7       	brne	.-12     	; 0x2004 <__pack_f+0x164>
    2010:	05 c0       	rjmp	.+10     	; 0x201c <__pack_f+0x17c>
    2012:	ee 24       	eor	r14, r14
    2014:	ff 24       	eor	r15, r15
    2016:	87 01       	movw	r16, r14
    2018:	ef ef       	ldi	r30, 0xFF	; 255
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	6e 2f       	mov	r22, r30
    201e:	67 95       	ror	r22
    2020:	66 27       	eor	r22, r22
    2022:	67 95       	ror	r22
    2024:	90 2f       	mov	r25, r16
    2026:	9f 77       	andi	r25, 0x7F	; 127
    2028:	d7 94       	ror	r13
    202a:	dd 24       	eor	r13, r13
    202c:	d7 94       	ror	r13
    202e:	8e 2f       	mov	r24, r30
    2030:	86 95       	lsr	r24
    2032:	49 2f       	mov	r20, r25
    2034:	46 2b       	or	r20, r22
    2036:	58 2f       	mov	r21, r24
    2038:	5d 29       	or	r21, r13
    203a:	b7 01       	movw	r22, r14
    203c:	ca 01       	movw	r24, r20
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	df 90       	pop	r13
    2048:	08 95       	ret

0000204a <__unpack_f>:
    204a:	fc 01       	movw	r30, r24
    204c:	db 01       	movw	r26, r22
    204e:	40 81       	ld	r20, Z
    2050:	51 81       	ldd	r21, Z+1	; 0x01
    2052:	22 81       	ldd	r18, Z+2	; 0x02
    2054:	62 2f       	mov	r22, r18
    2056:	6f 77       	andi	r22, 0x7F	; 127
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	22 1f       	adc	r18, r18
    205c:	22 27       	eor	r18, r18
    205e:	22 1f       	adc	r18, r18
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	89 2f       	mov	r24, r25
    2064:	88 0f       	add	r24, r24
    2066:	82 2b       	or	r24, r18
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	99 1f       	adc	r25, r25
    206e:	99 27       	eor	r25, r25
    2070:	99 1f       	adc	r25, r25
    2072:	11 96       	adiw	r26, 0x01	; 1
    2074:	9c 93       	st	X, r25
    2076:	11 97       	sbiw	r26, 0x01	; 1
    2078:	21 15       	cp	r18, r1
    207a:	31 05       	cpc	r19, r1
    207c:	a9 f5       	brne	.+106    	; 0x20e8 <__unpack_f+0x9e>
    207e:	41 15       	cp	r20, r1
    2080:	51 05       	cpc	r21, r1
    2082:	61 05       	cpc	r22, r1
    2084:	71 05       	cpc	r23, r1
    2086:	11 f4       	brne	.+4      	; 0x208c <__unpack_f+0x42>
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	37 c0       	rjmp	.+110    	; 0x20fa <__unpack_f+0xb0>
    208c:	82 e8       	ldi	r24, 0x82	; 130
    208e:	9f ef       	ldi	r25, 0xFF	; 255
    2090:	13 96       	adiw	r26, 0x03	; 3
    2092:	9c 93       	st	X, r25
    2094:	8e 93       	st	-X, r24
    2096:	12 97       	sbiw	r26, 0x02	; 2
    2098:	9a 01       	movw	r18, r20
    209a:	ab 01       	movw	r20, r22
    209c:	67 e0       	ldi	r22, 0x07	; 7
    209e:	22 0f       	add	r18, r18
    20a0:	33 1f       	adc	r19, r19
    20a2:	44 1f       	adc	r20, r20
    20a4:	55 1f       	adc	r21, r21
    20a6:	6a 95       	dec	r22
    20a8:	d1 f7       	brne	.-12     	; 0x209e <__unpack_f+0x54>
    20aa:	83 e0       	ldi	r24, 0x03	; 3
    20ac:	8c 93       	st	X, r24
    20ae:	0d c0       	rjmp	.+26     	; 0x20ca <__unpack_f+0x80>
    20b0:	22 0f       	add	r18, r18
    20b2:	33 1f       	adc	r19, r19
    20b4:	44 1f       	adc	r20, r20
    20b6:	55 1f       	adc	r21, r21
    20b8:	12 96       	adiw	r26, 0x02	; 2
    20ba:	8d 91       	ld	r24, X+
    20bc:	9c 91       	ld	r25, X
    20be:	13 97       	sbiw	r26, 0x03	; 3
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	13 96       	adiw	r26, 0x03	; 3
    20c4:	9c 93       	st	X, r25
    20c6:	8e 93       	st	-X, r24
    20c8:	12 97       	sbiw	r26, 0x02	; 2
    20ca:	20 30       	cpi	r18, 0x00	; 0
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	38 07       	cpc	r19, r24
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	48 07       	cpc	r20, r24
    20d4:	80 e4       	ldi	r24, 0x40	; 64
    20d6:	58 07       	cpc	r21, r24
    20d8:	58 f3       	brcs	.-42     	; 0x20b0 <__unpack_f+0x66>
    20da:	14 96       	adiw	r26, 0x04	; 4
    20dc:	2d 93       	st	X+, r18
    20de:	3d 93       	st	X+, r19
    20e0:	4d 93       	st	X+, r20
    20e2:	5c 93       	st	X, r21
    20e4:	17 97       	sbiw	r26, 0x07	; 7
    20e6:	08 95       	ret
    20e8:	2f 3f       	cpi	r18, 0xFF	; 255
    20ea:	31 05       	cpc	r19, r1
    20ec:	79 f4       	brne	.+30     	; 0x210c <__unpack_f+0xc2>
    20ee:	41 15       	cp	r20, r1
    20f0:	51 05       	cpc	r21, r1
    20f2:	61 05       	cpc	r22, r1
    20f4:	71 05       	cpc	r23, r1
    20f6:	19 f4       	brne	.+6      	; 0x20fe <__unpack_f+0xb4>
    20f8:	84 e0       	ldi	r24, 0x04	; 4
    20fa:	8c 93       	st	X, r24
    20fc:	08 95       	ret
    20fe:	64 ff       	sbrs	r22, 4
    2100:	03 c0       	rjmp	.+6      	; 0x2108 <__unpack_f+0xbe>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	8c 93       	st	X, r24
    2106:	12 c0       	rjmp	.+36     	; 0x212c <__unpack_f+0xe2>
    2108:	1c 92       	st	X, r1
    210a:	10 c0       	rjmp	.+32     	; 0x212c <__unpack_f+0xe2>
    210c:	2f 57       	subi	r18, 0x7F	; 127
    210e:	30 40       	sbci	r19, 0x00	; 0
    2110:	13 96       	adiw	r26, 0x03	; 3
    2112:	3c 93       	st	X, r19
    2114:	2e 93       	st	-X, r18
    2116:	12 97       	sbiw	r26, 0x02	; 2
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	8c 93       	st	X, r24
    211c:	87 e0       	ldi	r24, 0x07	; 7
    211e:	44 0f       	add	r20, r20
    2120:	55 1f       	adc	r21, r21
    2122:	66 1f       	adc	r22, r22
    2124:	77 1f       	adc	r23, r23
    2126:	8a 95       	dec	r24
    2128:	d1 f7       	brne	.-12     	; 0x211e <__unpack_f+0xd4>
    212a:	70 64       	ori	r23, 0x40	; 64
    212c:	14 96       	adiw	r26, 0x04	; 4
    212e:	4d 93       	st	X+, r20
    2130:	5d 93       	st	X+, r21
    2132:	6d 93       	st	X+, r22
    2134:	7c 93       	st	X, r23
    2136:	17 97       	sbiw	r26, 0x07	; 7
    2138:	08 95       	ret

0000213a <__fpcmp_parts_f>:
    213a:	1f 93       	push	r17
    213c:	dc 01       	movw	r26, r24
    213e:	fb 01       	movw	r30, r22
    2140:	9c 91       	ld	r25, X
    2142:	92 30       	cpi	r25, 0x02	; 2
    2144:	08 f4       	brcc	.+2      	; 0x2148 <__fpcmp_parts_f+0xe>
    2146:	47 c0       	rjmp	.+142    	; 0x21d6 <__fpcmp_parts_f+0x9c>
    2148:	80 81       	ld	r24, Z
    214a:	82 30       	cpi	r24, 0x02	; 2
    214c:	08 f4       	brcc	.+2      	; 0x2150 <__fpcmp_parts_f+0x16>
    214e:	43 c0       	rjmp	.+134    	; 0x21d6 <__fpcmp_parts_f+0x9c>
    2150:	94 30       	cpi	r25, 0x04	; 4
    2152:	51 f4       	brne	.+20     	; 0x2168 <__fpcmp_parts_f+0x2e>
    2154:	11 96       	adiw	r26, 0x01	; 1
    2156:	1c 91       	ld	r17, X
    2158:	84 30       	cpi	r24, 0x04	; 4
    215a:	99 f5       	brne	.+102    	; 0x21c2 <__fpcmp_parts_f+0x88>
    215c:	81 81       	ldd	r24, Z+1	; 0x01
    215e:	68 2f       	mov	r22, r24
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	61 1b       	sub	r22, r17
    2164:	71 09       	sbc	r23, r1
    2166:	3f c0       	rjmp	.+126    	; 0x21e6 <__fpcmp_parts_f+0xac>
    2168:	84 30       	cpi	r24, 0x04	; 4
    216a:	21 f0       	breq	.+8      	; 0x2174 <__fpcmp_parts_f+0x3a>
    216c:	92 30       	cpi	r25, 0x02	; 2
    216e:	31 f4       	brne	.+12     	; 0x217c <__fpcmp_parts_f+0x42>
    2170:	82 30       	cpi	r24, 0x02	; 2
    2172:	b9 f1       	breq	.+110    	; 0x21e2 <__fpcmp_parts_f+0xa8>
    2174:	81 81       	ldd	r24, Z+1	; 0x01
    2176:	88 23       	and	r24, r24
    2178:	89 f1       	breq	.+98     	; 0x21dc <__fpcmp_parts_f+0xa2>
    217a:	2d c0       	rjmp	.+90     	; 0x21d6 <__fpcmp_parts_f+0x9c>
    217c:	11 96       	adiw	r26, 0x01	; 1
    217e:	1c 91       	ld	r17, X
    2180:	11 97       	sbiw	r26, 0x01	; 1
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	f1 f0       	breq	.+60     	; 0x21c2 <__fpcmp_parts_f+0x88>
    2186:	81 81       	ldd	r24, Z+1	; 0x01
    2188:	18 17       	cp	r17, r24
    218a:	d9 f4       	brne	.+54     	; 0x21c2 <__fpcmp_parts_f+0x88>
    218c:	12 96       	adiw	r26, 0x02	; 2
    218e:	2d 91       	ld	r18, X+
    2190:	3c 91       	ld	r19, X
    2192:	13 97       	sbiw	r26, 0x03	; 3
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	82 17       	cp	r24, r18
    219a:	93 07       	cpc	r25, r19
    219c:	94 f0       	brlt	.+36     	; 0x21c2 <__fpcmp_parts_f+0x88>
    219e:	28 17       	cp	r18, r24
    21a0:	39 07       	cpc	r19, r25
    21a2:	bc f0       	brlt	.+46     	; 0x21d2 <__fpcmp_parts_f+0x98>
    21a4:	14 96       	adiw	r26, 0x04	; 4
    21a6:	8d 91       	ld	r24, X+
    21a8:	9d 91       	ld	r25, X+
    21aa:	0d 90       	ld	r0, X+
    21ac:	bc 91       	ld	r27, X
    21ae:	a0 2d       	mov	r26, r0
    21b0:	24 81       	ldd	r18, Z+4	; 0x04
    21b2:	35 81       	ldd	r19, Z+5	; 0x05
    21b4:	46 81       	ldd	r20, Z+6	; 0x06
    21b6:	57 81       	ldd	r21, Z+7	; 0x07
    21b8:	28 17       	cp	r18, r24
    21ba:	39 07       	cpc	r19, r25
    21bc:	4a 07       	cpc	r20, r26
    21be:	5b 07       	cpc	r21, r27
    21c0:	18 f4       	brcc	.+6      	; 0x21c8 <__fpcmp_parts_f+0x8e>
    21c2:	11 23       	and	r17, r17
    21c4:	41 f0       	breq	.+16     	; 0x21d6 <__fpcmp_parts_f+0x9c>
    21c6:	0a c0       	rjmp	.+20     	; 0x21dc <__fpcmp_parts_f+0xa2>
    21c8:	82 17       	cp	r24, r18
    21ca:	93 07       	cpc	r25, r19
    21cc:	a4 07       	cpc	r26, r20
    21ce:	b5 07       	cpc	r27, r21
    21d0:	40 f4       	brcc	.+16     	; 0x21e2 <__fpcmp_parts_f+0xa8>
    21d2:	11 23       	and	r17, r17
    21d4:	19 f0       	breq	.+6      	; 0x21dc <__fpcmp_parts_f+0xa2>
    21d6:	61 e0       	ldi	r22, 0x01	; 1
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	05 c0       	rjmp	.+10     	; 0x21e6 <__fpcmp_parts_f+0xac>
    21dc:	6f ef       	ldi	r22, 0xFF	; 255
    21de:	7f ef       	ldi	r23, 0xFF	; 255
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <__fpcmp_parts_f+0xac>
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	cb 01       	movw	r24, r22
    21e8:	1f 91       	pop	r17
    21ea:	08 95       	ret

000021ec <__prologue_saves__>:
    21ec:	2f 92       	push	r2
    21ee:	3f 92       	push	r3
    21f0:	4f 92       	push	r4
    21f2:	5f 92       	push	r5
    21f4:	6f 92       	push	r6
    21f6:	7f 92       	push	r7
    21f8:	8f 92       	push	r8
    21fa:	9f 92       	push	r9
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	ca 1b       	sub	r28, r26
    2216:	db 0b       	sbc	r29, r27
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	19 94       	eijmp

00002224 <__epilogue_restores__>:
    2224:	2a 88       	ldd	r2, Y+18	; 0x12
    2226:	39 88       	ldd	r3, Y+17	; 0x11
    2228:	48 88       	ldd	r4, Y+16	; 0x10
    222a:	5f 84       	ldd	r5, Y+15	; 0x0f
    222c:	6e 84       	ldd	r6, Y+14	; 0x0e
    222e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2230:	8c 84       	ldd	r8, Y+12	; 0x0c
    2232:	9b 84       	ldd	r9, Y+11	; 0x0b
    2234:	aa 84       	ldd	r10, Y+10	; 0x0a
    2236:	b9 84       	ldd	r11, Y+9	; 0x09
    2238:	c8 84       	ldd	r12, Y+8	; 0x08
    223a:	df 80       	ldd	r13, Y+7	; 0x07
    223c:	ee 80       	ldd	r14, Y+6	; 0x06
    223e:	fd 80       	ldd	r15, Y+5	; 0x05
    2240:	0c 81       	ldd	r16, Y+4	; 0x04
    2242:	1b 81       	ldd	r17, Y+3	; 0x03
    2244:	aa 81       	ldd	r26, Y+2	; 0x02
    2246:	b9 81       	ldd	r27, Y+1	; 0x01
    2248:	ce 0f       	add	r28, r30
    224a:	d1 1d       	adc	r29, r1
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	ed 01       	movw	r28, r26
    2258:	08 95       	ret

0000225a <_exit>:
    225a:	f8 94       	cli

0000225c <__stop_program>:
    225c:	ff cf       	rjmp	.-2      	; 0x225c <__stop_program>
